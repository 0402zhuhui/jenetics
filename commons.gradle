/*
 * Java Genetic Algorithm Library (@__identifier__@).
 * Copyright (c) @__year__@ Franz Wilhelmstötter
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * Author:
 *   Franz Wilhelmstötter (franz.wilhelmstoetter@gmx.at)
 *
 */

 import java.text.SimpleDateFormat
 import java.util.Date
 
 import org.apache.tools.ant.filters.ReplaceTokens
 
 import org.jenetics.gradle.task.JavadocColorizeTask
 
/**
 * Some commone task definitions and configurations.
 *
 * @author <a href="mailto:franz.wilhelmstoetter@gmx.at">Franz Wilhelmstötter</a>
 * @since 1.2
 * @version 1.4 &mdash; <em>$Date$</em>
 */
 

task export(group: 'export', description: 'Exports the whole project') {

	doLast  {
		// Copy the project source code.
		copy {
			from(projectDir) {
				include '*.gradle'
				include 'src/**/*.java'
				include 'src/**/*.xml'
				include 'src/**/*.c'
				include 'src/**/*.cpp'
				include 'src/**/*.h'
				include 'src/**/*.hpp'
			}
			into file("${exportProjectDir}/${project.name}")
			filter(ReplaceTokens, tokens: [
				__identifier__: identifier,
				__year__: copyrightYear
			])
		}
		copy {
			from(projectDir) {
				include 'src/**/*'
				exclude '*.gradle'
				exclude '**/*.java'
				exclude '**/*.xml'
				exclude '**/*.c'
				exclude '**/*.cpp'
				exclude '**/*.h'
				exclude '**/*.hpp'
			}
			into file("${exportProjectDir}/${project.name}")
		}
		
		if (plugins.hasPlugin('java')) {
			// Copy the external jar dependencies.
			configurations.testRuntime.each { jar ->
				if (jar.toString().endsWith('.jar')) {
					copy {
						from jar
						into exportProjectLibDir
					}
				}
			}
			
			// Copy the build library
			copy {
				from("${buildDir}/libs")
				into "${exportLibDir}"
			}
		}
	}
}

repositories {
	flatDir(dir: "${rootDir}/buildSrc/lib")
	mavenCentral()
}

