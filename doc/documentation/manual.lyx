#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{listings}
\usepackage{color}
\usepackage{url}
\usepackage{cclicenses}
\usepackage{multicol} 

\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.3,0.3,0.3}
\definecolor{mauve}{rgb}{0.58,0,0.82}
\definecolor{keyword}{rgb}{0.5,0,0.5}
\definecolor{background}{rgb}{0.96,0.96,0.96}
 
\lstset{ %
  language=java, 
  basicstyle=\footnotesize, 
  numbers=left,  
  numberstyle=\footnotesize, 
  stepnumber=1,      
  numbersep=6pt, 
  rulesep=5pt,
  backgroundcolor=\color{background},
  showspaces=false,  
  showstringspaces=false, 
  showtabs=false,   
  frame=single,  
  frameshape={}{nny}{nny}{},
  %framexleftmargin=8pt,
  tabsize=4,    
  captionpos=b,     
  breaklines=true,     
  breakatwhitespace=false,  
  %title=\lstname,        
  numberstyle=\tiny\color{gray},   
  keywordstyle=\color{keyword}\bfseries, 
  commentstyle=\color{dkgreen}, 
  stringstyle=\color{mauve},
  escapeinside={\%*}{*)},  
  morekeywords={*,...} 
}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format pdf2
\output_sync 0
\bibtex_command bibtex
\index_command default
\float_placement h
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Jenetics"
\pdf_author "Franz Wilhelmstötter"
\pdf_subject "Genetic Algorithm"
\pdf_keywords "Research, Artificial Intelligence, Bio-Informatics"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\boxbgcolor #ffffff
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language danish
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict true
\end_header

\begin_body

\begin_layout Standard
\align center

\family sans
\series bold
\size giant
\noun on
Jenetics
\series default
\noun default

\begin_inset VSpace 6mm
\end_inset


\end_layout

\begin_layout Standard
\align center

\family sans
\size largest
Java Genetic Algorithm Library Manual
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill*
\end_inset


\end_layout

\begin_layout Standard
\align right

\family sans
\series bold
\noun on
Franz Wilhelmstötter
\end_layout

\begin_layout Standard
\align right

\family sans
\size small
@!identifier!@
\family default
\size default

\begin_inset VSpace 2cm
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{roman}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill*
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphic/by-nc-sa.svg

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center

\size footnotesize
This manual is licensed under a 
\begin_inset CommandInset href
LatexCommand href
name "Creative Commons"
target "http://creativecommons.org/licenses/by-nc-sa/3.0/"

\end_inset

 Attribution-NonCommercial-ShareAlike 3.0 Unported License.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Abstract

\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 is an 
\series bold
Genetic Algorithm
\series default
, respectively an 
\series bold
Evolutionary Algorithm
\series default
, Library written in Java.
 It is designed with a clear separation of the several concepts of the algorithm
, e.
\begin_inset space ~
\end_inset

g.
 
\family typewriter
Gene
\family default
, 
\family typewriter
Chromosome
\family default
, 
\family typewriter
Genotype
\family default
, 
\family typewriter
Phenotype
\family default
, 
\family typewriter
Population
\family default
 and fitness
\family typewriter
 Function
\family default
.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{arabic}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The 
\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 project is a Java
\begin_inset Foot
status open

\begin_layout Plain Layout
The library depends on Java SE 7; 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.oracle.com/technetwork/java/javase/downloads/index.html
\end_layout

\end_inset


\end_layout

\end_inset

 library which provides an 
\begin_inset CommandInset href
LatexCommand href
name "genetic algorithm"
target "http://en.wikipedia.org/wiki/Genetic_algorithm"

\end_inset

 (GA) implementation.
 Genetic algorithms was first proposed and analyzed by 
\begin_inset CommandInset href
LatexCommand href
name "John Holland"
target "http://en.wikipedia.org/wiki/John_Henry_Holland"

\end_inset

 in 1975.
 This document is not an introduction or a tutorial for genetic algorithms.
 It is assumed that the reader has a knowledge about the structure and the
 functionality of genetic algorithms.
 A good GA introduction can be found in 
\begin_inset CommandInset citation
LatexCommand cite
key "Sivanandam2010"

\end_inset

, 
\begin_inset CommandInset citation
LatexCommand cite
key "michalewicz1996genetic"

\end_inset

 and 
\begin_inset CommandInset citation
LatexCommand cite
key "Whitley94agenetic"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "extendedchars=true,language=C,mathescape=true,numbers=left,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

$P_{0} 
\backslash
leftarrow P_{initial}$
\end_layout

\begin_layout Plain Layout

$F(P_{0})$
\end_layout

\begin_layout Plain Layout

while !finished:
\end_layout

\begin_layout Plain Layout

    $g 
\backslash
leftarrow g + 1$
\end_layout

\begin_layout Plain Layout

    $S_g 
\backslash
leftarrow select_{S}(P_{g - 1})$
\end_layout

\begin_layout Plain Layout

    $O_g 
\backslash
leftarrow select_{O}(P_{g - 1})$
\end_layout

\begin_layout Plain Layout

    $O_g 
\backslash
leftarrow alter(O_g)$
\end_layout

\begin_layout Plain Layout

    $P_g 
\backslash
leftarrow filter[g_i<g_{max}](S_g) + filter[g_i<g_{max}](O_g)$
\end_layout

\begin_layout Plain Layout

    $F(P_g)$
\end_layout

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Genetic-algorithm"

\end_inset

Genetic algorithm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Genetic-algorithm"

\end_inset

 shows the steps the 
\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 genetic algorithm is using.
 The first line creates the initial population and the second line calculates
 the fitness value of the individuals.
 (This is done by the 
\family typewriter
GeneticAlgorithm.setup()
\family default
 method.) Line 4 increases the generation number and line 5 and 6 selects
 the survivor and the offspring population.
 (The survivor/offspring fraction is set with the 
\family typewriter
GeneticAlgorithm.setOffspringFraction(double)
\family default
 method.) The selected off-springs are altered in line 7.
 The next line combines the survivor population and the altered offspring
 population, after removing the 
\shape italic
died
\shape default
 individuals, to the new population.
 The steps from line 4 to 9 are repeated until a given termination criterion
 is fulfilled.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphic/StructureClassDiagram.svg
	lyxscale 70
	height 45theight%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Structure-diagram"

\end_inset

Structure diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Structure-diagram"

\end_inset

 shows the main data structures of the GA.
 The Gene is the base of the class structure.
 Genes are aggregated in Chromosomes.
 One to n Chromosomes are aggregated in Genotypes.
 A Genotype and a fitness function from the Phenotype are collected into
 a Population.
\end_layout

\begin_layout Section
Getting started
\end_layout

\begin_layout Standard
The minimum GA setup needs a genotype-factory, 
\family typewriter
Factory<Genotype<?>>
\family default
, and a fitness 
\family typewriter
Function
\family default
.
 The 
\family typewriter
Genotype
\family default
 implements the 
\family typewriter
Factory
\family default
 interface and can be used as prototype for creating the initial 
\family typewriter
Population
\family default
 and for creating new, random 
\family typewriter
Genotype
\family default
s.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "extendedchars=true,language=Java,numbers=left,stepnumber=1,tabsize=4"
inline false
status open

\begin_layout Plain Layout

public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

    final Factory<Genotype<BitGene>> gtf = Genotype.valueOf(
\end_layout

\begin_layout Plain Layout

        BitChromosome.valueOf(10, 0.5)
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\begin_layout Plain Layout

    final Function<Genotype<BitGene>, Double> ff = ...
\end_layout

\begin_layout Plain Layout

    final GeneticAlgorithm<BitGene, Double> 
\end_layout

\begin_layout Plain Layout

    ga = new GeneticAlgorithm<>(gtf, ff)
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    ga.setup();
\end_layout

\begin_layout Plain Layout

    ga.evolve(100);
\end_layout

\begin_layout Plain Layout

    System.out.println(ga.getBestPhenotype());
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The genotype-factory 
\family typewriter
gtf
\family default
 in the example above will create genotypes which consists of one 
\family typewriter
BitChromosome
\family default
 with length 10.
 The one to zero probability of the newly created genotypes is set to 0.5.
 The fitness-function is parameterized with a 
\family typewriter
BitGene
\family default
 and a 
\family typewriter
Double
\family default
.
 That means that the fitness-function is calculating the fitness value as
 
\family typewriter
Double
\family default
.
 The return value of the fitness-function must be at least 
\family typewriter
Comparable
\family default
.
 The 
\family typewriter
GeneticAlgorithm
\family default
 object is then created with the genotype-factory and the fitness-function.
 For starting the evolution just call 
\family typewriter
ga.setup()
\family default
 and 
\family typewriter
ga.evolve(100)
\family default
.
 The 
\family typewriter
ga.setup()
\family default
 call creates the initial population and calculates its fitness.
 Then the GA evolves 100 generations an prints the best phenotype found
 so far.
 
\end_layout

\begin_layout Standard
In a more advanced setup you want to define mutation and/or selection strategies.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

    ga.setSelectors(new TournamentSelector<BitGene>(5));
\end_layout

\begin_layout Plain Layout

    ga.setAlterer(new SinglePointCrossover<BitGene>(0.1));
\end_layout

\begin_layout Plain Layout

    ga.addAlterer(new Mutation<BitGene>(0.01));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    ga.setup();
\end_layout

\begin_layout Plain Layout

    ga.evolve(100);
\end_layout

\begin_layout Plain Layout

    System.out.println(ga.getBestPhenotype());
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The alterers are concatenated, first the crossover (with corsage probability
 0.1) is performed and then the chromosomes are mutated (with probability
 0.01).
 For a detailed description of the available genetic operators revere the
 next section.
\end_layout

\begin_layout Section
Base classes
\end_layout

\begin_layout Standard
This chapter describes the base classes which enables you transform your
 actual problem into a structure so that it is solvable by 
\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
.
 
\end_layout

\begin_layout Paragraph
Genotype
\begin_inset CommandInset label
LatexCommand label
name "par:Genotype"

\end_inset


\end_layout

\begin_layout Standard
The central class the GA is working with, is the 
\family typewriter
Genotype
\family default
.
 It is the structural representative of an individual.
 The 
\family typewriter
Phenotype
\family default
 class is the actual representative of an individual, but only consists
 of the genotype and the fitness-function and doesn't change the basic structure.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphic/Genotype.eps
	width 80text%
	BoundingBox 0bp 50bp 402bp 246bp

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Genotype-structure"

\end_inset

Genotype structure
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Genotype-structure"

\end_inset

 shows the genotype structure.
 A genotype consists of 
\begin_inset Formula $N_{G}$
\end_inset

 chromosomes and a chromosome consists of 
\begin_inset Formula $N_{C[i]}$
\end_inset

 genes (depends of the chromosome).
 The overall number of genes of a genotype is therefore given by the sum
 of the chromosomes genes: 
\begin_inset Formula 
\begin{equation}
N_{g}=\sum_{i=0}^{N_{G}-1}N_{C[i]}\label{eq:Number of genes}
\end{equation}

\end_inset

The chromosomes doesn't have to have the same size.
 It is only required that all genes are from the same type and the genes
 within a chromosome have the same constraints; e.
\begin_inset space ~
\end_inset

g.
 the same min- and max values for number-genes.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

final Genotype<Float64Gene> genotype = Genotype.valueOf(
\end_layout

\begin_layout Plain Layout

    new Float64Chromosome(0.0, 1.0, 8),
\end_layout

\begin_layout Plain Layout

    new Float64Chromosome(1.0, 2.0, 10),
\end_layout

\begin_layout Plain Layout

    new Float64Chromosome(0.0, 10.0, 9),
\end_layout

\begin_layout Plain Layout

    new Float64Chromosome(0.1, 0.9, 5)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code snippet above creates a genotype with the same structure as shown
 in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Genotype-structure"

\end_inset

.
 In this example a 
\family typewriter
Float64Gene
\family default
 has been chosen as gene type.
 A single gene can be accessed as followed via 
\family typewriter
\size small
genotype.getChromosome(2).getGene(8)
\family default
\size default
.
\end_layout

\begin_layout Paragraph
Fitness function
\end_layout

\begin_layout Standard
The fitness function is also an essential part when modeling the GA.
 It takes a genotype as argument and returns, at least, a 
\family typewriter
Comparable
\family default
 object as result---the fitness value.
 This allows the GA, respectively the selection operators, to select the
 offspring- and survivor population.
 Some selectors have stronger requirements to the fitness value than a 
\family typewriter
Comparable
\family default
, but this constraints is checked by the type system at compile time.
\end_layout

\begin_layout Standard
The following example shows the simplest possible fitness function.
 It returns the allele of an 
\begin_inset Formula $1\mathsf{x}1$
\end_inset


\shape italic
 float
\shape default
 genotype.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class Id implements Function<Genotype<Float64Gene>, Float64> {
\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public Float64 apply(final Genotype<Float64Gene> genotype) {
\end_layout

\begin_layout Plain Layout

        return genotype.getGene().getAllele();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

The first type parameter defines the kind of genotype from which the fitness
 value is calculated and the second type parameter determines the return
 type.
 As already mentioned, return type must implement the 
\family typewriter
Comparable
\family default
 interface.
\end_layout

\begin_layout Paragraph
Fitness scaler
\end_layout

\begin_layout Standard
The fitness value, calculated by the fitness function, is 
\shape italic
only
\shape default
 the 
\shape italic
raw
\shape default
-fitness of an individual.
 The Jenetics library allows you to apply an additional scaling function
 on the raw-fitness to form the actual fitness value.
 This can be useful when using probability selectors (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:Probability-selectors"

\end_inset

), where the actual amount of the fitness value influences the selection
 probability.
 In such cases, the fitness scaler gives you additional flexibility when
 selecting offspring and survivors.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class Doubling extends Function<Float64, Float64> {
\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public Float64 apply(final Float64 value) {
\end_layout

\begin_layout Plain Layout

        return value.times(Float64.valueOf(2));
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Genes
\end_layout

\begin_layout Standard
Genes are the atoms of the 
\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 library.
 They contain the actual information (alleles) of the encoded solution.
\end_layout

\begin_layout Section
Genetic operators
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Genetic operators"
target "https://en.wikipedia.org/wiki/Genetic_operator"

\end_inset

 are used for creating 
\shape italic
genetic
\shape default
 diversity (
\family typewriter
Alterer
\family default
) and select potentially useful solutions for recombination (
\family typewriter
Selector
\family default
).
 This section gives you an overview about the genetic operators available
 in the 
\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 library.
 It also contains some theoretical information, which should help to choose
 the right combination of operators for your problem you want to solve.
\end_layout

\begin_layout Subsection
Selectors
\end_layout

\begin_layout Standard
Selectors are responsible for selecting a given number of individuals from
 the population.
 The selectors are used to divide the population into 
\shape italic
survivors
\shape default
 and 
\shape italic
offspring
\shape default
.
 The selectors for 
\shape italic
offspring
\shape default
 and for the 
\shape italic
survivors
\shape default
 can be chosen independently.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

GeneticAlgorithm<Float64Gene, Double> ga = ...
\end_layout

\begin_layout Plain Layout

ga.setOffspringFraction(0.7);
\end_layout

\begin_layout Plain Layout

ga.setSurvivorSelector(
\end_layout

\begin_layout Plain Layout

    new RouletteWheelSelector<Float64Gene, Double>()
\end_layout

\begin_layout Plain Layout

);
\end_layout

\begin_layout Plain Layout

ga.setOffspringSelector(
\end_layout

\begin_layout Plain Layout

    new TournamentSelector<Float64Gene, Double>()
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the property 
\family typewriter
offspringFraction
\family default
, 
\begin_inset Formula $o_{f}$
\end_inset

, it is possible to control the number of selected offspring 
\begin_inset Formula 
\begin{equation}
\left\Vert O_{g}\right\Vert =\textrm{rint}\left(\left\Vert P_{g}\right\Vert \cdot o_{f}\right)
\end{equation}

\end_inset

and the number of selected survivors 
\begin_inset Formula 
\begin{eqnarray}
\left\Vert S_{g}\right\Vert  & = & \left\Vert P_{g}\right\Vert -\left\Vert O_{g}\right\Vert .
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphic/SelectorClassDiagram.svg
	lyxscale 70
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Selector-class-diagram"

\end_inset

Selector class diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Selector-class-diagram"

\end_inset

 shows the class hierarchy of the available selectors.
\end_layout

\begin_layout Paragraph
Tournament selector
\end_layout

\begin_layout Standard
In 
\begin_inset CommandInset href
LatexCommand href
name "tournament selection"
target "https://en.wikipedia.org/wiki/Tournament_selection"

\end_inset

 the best individual from a random sample of 
\begin_inset Formula $s$
\end_inset

 individuals is chosen for the population 
\begin_inset Formula $Pg$
\end_inset

.
 The samples are drawn (in this class) with replacement.
 An individual will win a tournament only if its fitness is greater than
 the fitness of the other 
\begin_inset Formula $s-1$
\end_inset

 competitors.
 Note that the worst individual never survives, and the best individual
 wins in all the tournaments it participates.
 The selection pressure can be varied by changing the tournament size 
\begin_inset Formula $s$
\end_inset

.
 For large values of 
\begin_inset Formula $s$
\end_inset

, weak individuals have less chance being selected.
\end_layout

\begin_layout Paragraph
Truncation selector
\end_layout

\begin_layout Standard
In 
\begin_inset CommandInset href
LatexCommand href
name "truncation selection"
target "https://en.wikipedia.org/wiki/Truncation_selection"

\end_inset

 individuals are sorted according to their fitness.
 Only the 
\begin_inset Formula $n$
\end_inset

 best individuals are selected.
\end_layout

\begin_layout Paragraph
Monte-Carlo selector
\end_layout

\begin_layout Standard
Select the phenotypes from a given population randomly.
 This class can be used to measure the performance of an other given selector.
 In general, the 
\shape italic
performance
\shape default
 of a selector should be better than the selection performance of the Monte
 Carlo selector.
\end_layout

\begin_layout Paragraph
Probability selectors
\begin_inset CommandInset label
LatexCommand label
name "par:Probability-selectors"

\end_inset


\end_layout

\begin_layout Standard
The probability selectors are a variation of 
\shape italic
fitness proportional
\shape default
 selectors and selects individuals from a given population based on it's
 
\shape italic
selection
\shape default
 probability 
\begin_inset Formula $p_{i}$
\end_inset

.
 
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphic/FitnessProportionalSelection.eps
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Fitness-proportional-selection"

\end_inset

Fitness proportional selection
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Fitness proportional selection works as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Fitness-proportional-selection"

\end_inset

.
 An uniform distributed random number 
\begin_inset Formula $r\in\left[0,F\right)$
\end_inset

 specifies which individual is selected: 
\begin_inset Formula 
\begin{equation}
i\leftarrow\underset{n\in\left[0,N\right)}{\textrm{minarg}}\left\{ r<\sum_{i=0}^{n}f_{i}\right\} ,
\end{equation}

\end_inset

where 
\begin_inset Formula $N$
\end_inset

 is the number of individuals and 
\begin_inset Formula $f_{i}$
\end_inset

 the fitness value of the 
\begin_inset Formula $i^{\textrm{th}}$
\end_inset

 individual.
 The probability selector works the same way, only the fitness value 
\begin_inset Formula $f_{i}$
\end_inset

 is replaced by the individual's selection probability 
\begin_inset Formula $P_{i}$
\end_inset

.
 It is not necessary to sort the population.
 The selection probability of an individual 
\begin_inset Formula $i$
\end_inset

 follows a binomial distribution 
\begin_inset Formula 
\begin{equation}
P_{i}(k)=\left(\begin{array}{c}
n\\
k
\end{array}\right)P_{i}^{k}\left(1-P_{i}\right)^{n-k}
\end{equation}

\end_inset

where 
\begin_inset Formula $n$
\end_inset

 is the overall number of selected individuals and 
\begin_inset Formula $k$
\end_inset

 the number of individual 
\begin_inset Formula $i$
\end_inset

 in the set of selected individuals.
\end_layout

\begin_layout Paragraph
Roulette-wheel selector
\end_layout

\begin_layout Standard
The roulette-wheel selector is also known as fitness proportional selector.
 The fitness value 
\begin_inset Formula $f_{i}$
\end_inset

 is used to calculate the selection probability of individual 
\begin_inset Formula $i$
\end_inset

.
 
\begin_inset Formula 
\begin{equation}
P_{i}=\frac{f_{i}}{\sum_{j=1}^{N}f_{j}}
\end{equation}

\end_inset

Selecting 
\begin_inset Formula $n$
\end_inset

 individuals from a given population is equivalent to play 
\begin_inset Formula $n$
\end_inset

 times on the roulette-wheel.
 The population must not be sorted when selecting.
\end_layout

\begin_layout Paragraph
Linear-rank selector
\end_layout

\begin_layout Standard
In linear-ranking selection the individuals are sorted according to their
 fitness values.
 The rank 
\begin_inset Formula $N$
\end_inset

 is assignee to the best individual and the rank 1 to the worst individual.
 The selection probability 
\begin_inset Formula $p_{i}$
\end_inset

 of individual 
\begin_inset Formula $i$
\end_inset

 is linearly assigned to the individuals according to their rank.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
P_{i}=\frac{1}{N}\left(n^{-}+\left(n^{+}-n^{-}\right)\frac{i-1}{N-1}\right).
\end{equation}

\end_inset

Here 
\begin_inset Formula $\frac{n^{-}}{N}$
\end_inset

 is the probability of the worst individual to be selected and 
\begin_inset Formula $\frac{n^{+}}{N}$
\end_inset

 the probability of the best individual to be selected.
 As the population size is held constant, the condition 
\begin_inset Formula $n^{+}=2-n^{-}$
\end_inset

 and 
\begin_inset Formula $n^{-}\geq0$
\end_inset

 must be fulfilled.
 Note that all individuals get a different rank, respectively, a different
 selection probability, even they have the same fitness value.
\begin_inset CommandInset citation
LatexCommand cite
key "Blickle97acomparison"

\end_inset


\end_layout

\begin_layout Paragraph
Exponential-rank selector
\end_layout

\begin_layout Standard
An alternative to the 
\shape italic
weak
\shape default
 linear-rank selector is to assign survival probabilities to the sorted
 individuals using an exponential function 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
P_{i}=\left(c-1\right)\frac{c^{i-1}}{c^{N}-1},
\end{equation}

\end_inset

where 
\begin_inset Formula $c$
\end_inset

 must within the range 
\begin_inset Formula $\left[0\ldots1\right)$
\end_inset

.
 A small value of 
\begin_inset Formula $c$
\end_inset

 increases the probability of the best individual to be selected.
 If 
\begin_inset Formula $c$
\end_inset

 is set to zero, the selection probability of the best individual is set
 to one.
 The selection probability of all other individuals is zero.
 A value near one equalizes the selection probabilities.
 This selector sorts the population in descending order while calculating
 the selection probabilities.
 
\end_layout

\begin_layout Paragraph
Boltzmann selector
\end_layout

\begin_layout Standard
The selection probability of the Boltzmann selector is defined as 
\begin_inset Formula 
\begin{equation}
P_{i}=\frac{\textrm{e}^{b\cdot f_{i}}}{Z},
\end{equation}

\end_inset

where 
\begin_inset Formula $b$
\end_inset

 controls the selection intensity and 
\begin_inset Formula 
\begin{equation}
Z=\sum_{i=1}^{n}\textrm{e}^{f_{i}},
\end{equation}

\end_inset


\begin_inset Formula $f_{i}$
\end_inset

 denotes the fitness of the individual 
\begin_inset Formula $i$
\end_inset

.
 Positive values of 
\begin_inset Formula $b$
\end_inset

 increases the selection probability of individuals with high fitness values
 and negative values of 
\begin_inset Formula $b$
\end_inset

 decreases it.
 If 
\begin_inset Formula $b$
\end_inset

 is zero, the selection probability of all individuals is set to 
\begin_inset Formula $\frac{1}{N}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Stochastic-universal selector
\end_layout

\begin_layout Standard
Stochastic-universal selection
\begin_inset CommandInset citation
LatexCommand cite
key "back1996evolutionary"

\end_inset

 (SUS) is a method for selecting individuals according to some given probability
 in a way that minimizes the chance of fluctuations.
 It can be viewed as a type of roulette game where we now have 
\begin_inset Formula $P$
\end_inset

 equally spaced points which we spin.
 SUS uses a single random value for selecting individuals by choosing them
 at equally spaced intervals.
 The selection method was introduced by James Baker.
\begin_inset CommandInset citation
LatexCommand cite
key "baker1987selection"

\end_inset


\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphic/StochasticUniversalSelection.eps
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Stochastic-universal-selection"

\end_inset

Stochastic-universal selection
\end_layout

\end_inset


\end_layout

\end_inset

Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Stochastic-universal-selection"

\end_inset

 shows how the stochastic-universal selection works; 
\begin_inset Formula $n$
\end_inset

 is the number of individuals to select.
 
\end_layout

\begin_layout Subsection
Alterers
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Genetic operators"
target "https://en.wikipedia.org/wiki/Genetic_operator"

\end_inset

 are responsible for the genetic diversity of the genetic algorithm.
 The genetic operator types used in 
\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 are
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset href
LatexCommand href
name "mutation"
target "https://en.wikipedia.org/wiki/Mutation_(genetic_algorithm)"

\end_inset

 and
\end_layout

\begin_layout Enumerate
recombination (e.
\begin_inset space ~
\end_inset

g.
 
\begin_inset CommandInset href
LatexCommand href
name "crossover"
target "https://en.wikipedia.org/wiki/Crossover_(genetic_algorithm)"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphic/GeneticOperatorClassDiagram.svg
	lyxscale 70
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Alterer-class-diagram"

\end_inset

Alterer class diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Mutation
\end_layout

\begin_layout Standard
There are two distinct roles 
\emph on
mutation
\emph default
 plays in an Genetic algorithm:
\end_layout

\begin_layout Enumerate
Exploring the search space.
 By making small moves mutation allows a population to explore the search
 space.
 This exploration is often slow compared to crossover, but in problems where
 crossover is disruptive this can be an important way to explore the landscape.
 
\end_layout

\begin_layout Enumerate
Maintaining diversity.
 Mutation prevents a population from correlating.
 Even if most of the search is being performed by crossover, mutation can
 be vital to provide the diversity which crossover needs.
 
\end_layout

\begin_layout Standard
The mutation probability 
\begin_inset Formula $P(m)$
\end_inset

 is the parameter that must be optimized.
 The optimal value of the mutation rate depends on the role mutation plays.
 If mutation is the only source of exploration (if there is no crossover)
 then the mutation rate should be set so that a reasonable neighborhood
 of solutions is explored.
\end_layout

\begin_layout Standard
The mutation probability 
\begin_inset Formula $P(m)$
\end_inset

 is the probability that a specific gene, over the whole population, is
 mutated.
 That means, the (average) number of genes mutated by an mutator is
\begin_inset Formula 
\begin{equation}
\hat{\mu}=N_{g}\cdot P(m)
\end{equation}

\end_inset

where 
\begin_inset Formula $N_{g}$
\end_inset

 is the number of available genes of the population (see equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Number of genes"

\end_inset

).
 
\end_layout

\begin_layout Paragraph
Mutator
\end_layout

\begin_layout Standard
The 
\family typewriter
Mutator
\family default
 class has to deal with the problem, that the genes are arranged in a
\shape italic
 
\begin_inset Formula $3D$
\end_inset


\shape default
 structure (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:Genotype"

\end_inset

).
 The mutator selects the gene which will be mutated in three steps:
\end_layout

\begin_layout Enumerate
Select a genotype 
\begin_inset Formula $G[i]$
\end_inset

 from the population with probability 
\begin_inset Formula $P_{G}(m)$
\end_inset

,
\end_layout

\begin_layout Enumerate
select a chromosome 
\begin_inset Formula $C[j]$
\end_inset

 from the selected genotype 
\begin_inset Formula $G[i]$
\end_inset

 with probability 
\begin_inset Formula $P_{C}(m)$
\end_inset

 and
\end_layout

\begin_layout Enumerate
select a gene 
\begin_inset Formula $g[k]$
\end_inset

 from the selected chromosome 
\begin_inset Formula $C[j]$
\end_inset

 with probability 
\begin_inset Formula $P_{g}(m)$
\end_inset

.
\end_layout

\begin_layout Standard
The needed sub-selection probabilities are set to 
\begin_inset Formula 
\begin{equation}
P_{G}(m)=P_{C}(m)=P_{g}(m)=\sqrt[3]{P(m)}
\end{equation}

\end_inset


\end_layout

\begin_layout Paragraph
Gaussian mutator
\end_layout

\begin_layout Standard
The 
\family typewriter
GaussianMutator
\family default
 class performs the mutation of a 
\family typewriter
NumberGene
\family default
.
 This mutator picks a new value based on a Gaussian distribution around
 the current value of the gene.
 The variance of the new value (before clipping to the allowed gene range)
 will be 
\begin_inset Formula 
\begin{equation}
\hat{\sigma}^{2}=\left(\frac{g_{max}-g_{min}}{4}\right)^{2}
\end{equation}

\end_inset

where 
\begin_inset Formula $g_{min}$
\end_inset

 and 
\begin_inset Formula $g_{max}$
\end_inset

 are the valid minimum and maximum values of the number gene.
 The new value will be cropped to the gene's boundaries.
\end_layout

\begin_layout Paragraph
Swap mutator
\end_layout

\begin_layout Standard
The 
\family typewriter
SwapMutator
\family default
 class changes the order of genes in a chromosome, with the hope of bringing
 related genes closer together, thereby facilitating the production of building
 blocks.
 This mutation operator can also be used for combinatorial problems, where
 no duplicated genes within a chromosome are allowed, e.
\begin_inset space ~
\end_inset

g.
 for the TSP.
 
\end_layout

\begin_layout Subsubsection
Recombination
\end_layout

\begin_layout Standard
An enhanced genetic algorithm (EGA) combine elements of existing solutions
 in order to create a new solution, with some of the properties of each
 parent.
 Recombination creates a new chromosome by combining parts of two (or more)
 parent chromosomes.
 This combination of chromosomes can be made by selecting one or more crossover
 points, splitting these chromosomes on the selected points, and merge those
 portions of different chromosomes to form new ones.
\end_layout

\begin_layout Standard
\align block

\shape italic
Because of the possible different chromosome length and/or chromosome constraint
s within a genotype, only chromosomes with the same genotype position are
 recombined.
\end_layout

\begin_layout Standard
The recombination probability 
\begin_inset Formula $P(r)$
\end_inset

 determines the probability that a given individual (genotype) of a population
 is selected for recombination.
 The (mean) number of changed individuals depend on the concrete implementation
 and can be vary from 
\begin_inset Formula $P(r)\cdot N_{g}$
\end_inset

 to 
\begin_inset Formula $P(r)\cdot N_{g}\cdot O_{R}$
\end_inset

 , where 
\begin_inset Formula $O_{R}$
\end_inset

 is the order of the recombination, which is the number of individuals involved
 in the 
\family typewriter
recombine
\family default
 method.
\end_layout

\begin_layout Paragraph
Single-point crossover
\end_layout

\begin_layout Standard
The 
\family typewriter
SinglePointCrossover
\family default
 class changes to children chromosomes by taking two chromosomes and cutting
 them at some, randomly chosen, site.
\end_layout

\begin_layout Standard
If we create a child and its complement we preserving the total number of
 genes in the population, preventing any genetic drift.
 Single-point crossover is the classic form of crossover.
 However, it produces very slow mixing compared with multi-point crossover
 or uniform crossover.
 For problems where the site position has some intrinsic meaning to the
 problem single-point crossover can lead to small disruption than multi-point
 or uniform crossover.
 
\end_layout

\begin_layout Paragraph
Partially-matched crossover
\end_layout

\begin_layout Standard
The 
\family typewriter
PartiallyMatchedCrossover
\family default
 class guarantees that all genes are found exactly once in each chromosome.
 No gene is duplicated by this crossover.
 The partially-matched crossover (PMX) can be applied usefully in the TSP
 or other permutation problem encodings.
 Permutation encoding is useful for all problems where the fitness only
 depends on the ordering of the genes within the chromosome.
 This is the case in many combinatorial optimization problems.
 Other crossover operators for combinatorial optimization are:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
order crossover
\end_layout

\begin_layout Itemize
cycle crossover
\end_layout

\begin_layout Itemize
edge recombination crossover
\end_layout

\begin_layout Itemize
edge assembly crossover
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The PMX is similar to the two-point crossover.
 A crossing region is chosen by selecting two crossing points.
 
\end_layout

\begin_layout LyX-Code
C1 = 012|345|6789
\end_layout

\begin_layout LyX-Code
C2 = 987|654|3210
\end_layout

\begin_layout Standard
After performing the crossover we--normally--got two invalid chromosomes.
\end_layout

\begin_layout LyX-Code
C1 = 012|654|6789
\end_layout

\begin_layout LyX-Code
C2 = 987|345|3210
\end_layout

\begin_layout Standard
Chromosome C1 contains the value 6 twice and misses the value 3.
 On the other side chromosome C2 contains the value 3 twice and misses the
 value 6.
 We can observe that this crossover is equivalent to the exchange of the
 values 3
\begin_inset Formula $\rightarrow$
\end_inset

6, 4
\begin_inset Formula $\rightarrow$
\end_inset

5 and 5
\begin_inset Formula $\rightarrow$
\end_inset

4.
 To repair the two chromosomes we have to apply this exchange outside the
 crossing region.
 
\end_layout

\begin_layout LyX-Code
C1 = 012|654|3789
\end_layout

\begin_layout LyX-Code
C2 = 987|345|6210
\end_layout

\begin_layout Section
Practice
\end_layout

\begin_layout Subsection
Concurrency
\end_layout

\begin_layout Standard
The 
\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 library parallelizes independent task whenever possible.
 Especially the evaluation of the fitness-function is done concurrently.
 That means that the GA's fitness-function must be thread safe, because
 the fitness-function is shared by all phenotypes of a population.
 The easiest way for achieving thread-safety is to make the fitness-function
 re-entrant.
\end_layout

\begin_layout Standard

\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 uses the 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
name "ConcurrentContext"
target "http://javolution.org/target/site/apidocs/javolution/context/ConcurrentContext.html"

\end_inset

 
\family default
from the 
\begin_inset CommandInset href
LatexCommand href
name "Javolution"
target "http://javolution.org/"

\end_inset

 project for concurrent task execution.
 In the default configuration the 
\family typewriter
ConcurrentContext
\family default
 utilizes all available
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This is defined by 
\family typewriter
Runtime.getRuntime().availableProcessors()
\family default
.
\end_layout

\end_inset

 cores of the target machine.
 If you want to change the number of used cores you must do this before
 the GA initialization.
 The configuration is done by the 
\family typewriter
org.jenetics.util.Concurrency
\family default
 class as shown in the following example.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import org.jenetics.util.Concurrency;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Main {
\end_layout

\begin_layout Plain Layout

    public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

        final int parallelism = 10;
\end_layout

\begin_layout Plain Layout

        Concurrency.setConcurrency(parallelism);
\end_layout

\begin_layout Plain Layout

        // ...
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

The 
\family typewriter
ConcurrentContext
\family default
 uses it's own--optimized--thread-pool implementation.
 If you need to have a single executor service, for the GA and your own
 classes, you can initialize the 
\family typewriter
Concurrency
\family default
 class with the 
\family typewriter
ForkJoinPool
\family default
 from the JDK.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import java.util.concurrent.ForkJoinPool;
\end_layout

\begin_layout Plain Layout

import org.jenetics.util.Concurrency;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Main {
\end_layout

\begin_layout Plain Layout

    public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

        final int parallelism = 10;
\end_layout

\begin_layout Plain Layout

        final ForkJoinPool pool = new ForkJoinPool(parallelism);
\end_layout

\begin_layout Plain Layout

        Concurrency.setForkJoinPool(pool);
\end_layout

\begin_layout Plain Layout

        // ...
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

The concurrent context from the Javolution project is used in the following
 way.
 A detailed usage description can be found at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://javolution.org/
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ConcurrentContext.enter();
\end_layout

\begin_layout Plain Layout

try {
\end_layout

\begin_layout Plain Layout

    ConcurrentContext.execute(new Runnable() { public void run() {
\end_layout

\begin_layout Plain Layout

        // Execution of task one.
\end_layout

\begin_layout Plain Layout

    }});
\end_layout

\begin_layout Plain Layout

    ConcurrentContext.execute(new Runnable() { public void run() {
\end_layout

\begin_layout Plain Layout

        // Execution task two.
\end_layout

\begin_layout Plain Layout

    }});
\end_layout

\begin_layout Plain Layout

} finally {
\end_layout

\begin_layout Plain Layout

    ConcurrentContext.exit();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

The example above executes the two tasks in parallel.
 The 
\family typewriter
exit()
\family default
 call in the finally block waits until the two tasks finishes execution.
 Using the 
\family typewriter
Concurrency
\family default
 class, this can be written more compactly.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try (Concurrency c = Concurrency.start()) {
\end_layout

\begin_layout Plain Layout

    c.execute(new Runnable() { public void run() {
\end_layout

\begin_layout Plain Layout

        // Execution of task one.
\end_layout

\begin_layout Plain Layout

    }});
\end_layout

\begin_layout Plain Layout

    c.execute(new Runnable() { public void run() {
\end_layout

\begin_layout Plain Layout

        // Execution of task two.
\end_layout

\begin_layout Plain Layout

    }});
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If the GA itself runs in a separate thread and you want to change the configurat
ion of the GA while running you have to acquire the GA's lock to do this
 in a safe manner.
 The following code example shows how to start the GA in a separate thread.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

final GeneticAlgorithm<Float64Gene, Float64> ga = ...
\end_layout

\begin_layout Plain Layout

ga.setup();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Starting the GA in separate thread.
\end_layout

\begin_layout Plain Layout

Thread thread = new Thread(new Runnable() { public void run() {
\end_layout

\begin_layout Plain Layout

    while(!Thread.currentThread().isInterrupted()) {
\end_layout

\begin_layout Plain Layout

        ga.evolve();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}});
\end_layout

\begin_layout Plain Layout

thread.start();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Update the GA configuration.
\end_layout

\begin_layout Plain Layout

ga.getLock().lock();
\end_layout

\begin_layout Plain Layout

try {
\end_layout

\begin_layout Plain Layout

    ga.setAlterer(new Mutation(0.02));
\end_layout

\begin_layout Plain Layout

    ga.setPopulationSize(120);
\end_layout

\begin_layout Plain Layout

    ga.setMaximalPhenotypeAge(30);
\end_layout

\begin_layout Plain Layout

} finally {
\end_layout

\begin_layout Plain Layout

    ga.getLock().unlock();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Read the GA configuration.
\end_layout

\begin_layout Plain Layout

ga.getLock().lock();
\end_layout

\begin_layout Plain Layout

try {
\end_layout

\begin_layout Plain Layout

    final Statistics<?, ?> statistics = ga.getStatistics();
\end_layout

\begin_layout Plain Layout

    final Function<?, ?> scaler = ga.getFitnessScaler();
\end_layout

\begin_layout Plain Layout

} finally {
\end_layout

\begin_layout Plain Layout

    ga.getLock().unlock();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

The code above ensures that the returned statistics and fitness-scaler where
 used within the same 
\family typewriter
evolve()
\family default
 step.
\end_layout

\begin_layout Subsection
Statistics
\end_layout

\begin_layout Standard
The 
\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 library gives you statistics information for every evolved generation.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

final GeneticAlgorithm<Float64Gene, Float64> ga = ...
\end_layout

\begin_layout Plain Layout

ga.setup();
\end_layout

\begin_layout Plain Layout

for (int i = 0; i < 100; ++i) {
\end_layout

\begin_layout Plain Layout

    ga.evolve();
\end_layout

\begin_layout Plain Layout

    System.out.println(ga.getStatistics());
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

The statistics object stores information---among other things---about the
 best- and the worst phenotype and some timing information, for performance
 analysis.
\end_layout

\begin_layout Subsection
Termination
\end_layout

\begin_layout Standard
The easiest way to terminate an GA is to evolve a specific number of generations.
 This works well for most problems and termination is guaranteed.
 With the statistics object you can access after every generation you can
 define a more advanced termination strategy using this information.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

final GeneticAlgorithm<Float64Gene, Float64> ga = ...
\end_layout

\begin_layout Plain Layout

// Defining your termination function.
\end_layout

\begin_layout Plain Layout

final Function<Statistics<Float64Gene, Float64>, Boolean> until = ...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ga.setup();
\end_layout

\begin_layout Plain Layout

ga.evolve(until);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Using the 'Until.SteadyFitness' terminator.
\end_layout

\begin_layout Plain Layout

ga.evolve(Until.SteadyFitness(5));
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The GA terminates when the termination function returns false.
 
\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 comes with some default terminations functions implemented in the 
\family typewriter
Until
\family default
 class in the 
\family typewriter
org.jenetics
\family default
 package.
 the Steady-fitness terminator for example finishes the 
\emph on
evolution
\emph default
 if the best fitness value doesn't increase for 5 consecutive generations.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "extendedchars=true,language=C,mathescape=true,numbers=left,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class SteadyFitness<C extends Comparable<? super C>>
\end_layout

\begin_layout Plain Layout

   implements Function<Statistics<?, C>, Boolean>
\end_layout

\begin_layout Plain Layout

 {
\end_layout

\begin_layout Plain Layout

  private final int _genenerations;
\end_layout

\begin_layout Plain Layout

  private C _fitness;
\end_layout

\begin_layout Plain Layout

  private int _stableGenerations = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  public SteadyFitness(final int generations) {
\end_layout

\begin_layout Plain Layout

    _genenerations = generations;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  @Override
\end_layout

\begin_layout Plain Layout

  public Boolean apply(final Statistics<?, C> stat) {
\end_layout

\begin_layout Plain Layout

    boolean proceed = true;
\end_layout

\begin_layout Plain Layout

    if (_fitness == null) {
\end_layout

\begin_layout Plain Layout

      _fitness = stat.getBestFitness();
\end_layout

\begin_layout Plain Layout

      _stableGenerations = 1;
\end_layout

\begin_layout Plain Layout

    } else {
\end_layout

\begin_layout Plain Layout

      final Optimize opt = stat.getOptimize();
\end_layout

\begin_layout Plain Layout

      if (opt.compare(_fitness, stat.getBestFitness()) >= 0) {
\end_layout

\begin_layout Plain Layout

        proceed = ++_stableGenerations <= _genenerations;
\end_layout

\begin_layout Plain Layout

      } else {
\end_layout

\begin_layout Plain Layout

        _fitness = stat.getBestFitness();
\end_layout

\begin_layout Plain Layout

        _stableGenerations = 1;
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return proceed ? Boolean.TRUE : Boolean.FALSE;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Steady-state-termination"

\end_inset

Steady state termination
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Steady-state-termination"

\end_inset

 shows the (shortened) code for the steady-state termination function which
 you can find in the 
\family typewriter
Until
\family default
 class and should give you an idea you to implement your own termination
 function.
\end_layout

\begin_layout Subsection
Randomness
\end_layout

\begin_layout Standard
The PRNG
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Pseudorandom_number_generator
\end_layout

\end_inset


\end_layout

\end_inset

 is an essential part of an GA.
 It is used to create the initial population and new (random) individuals
 for those who died, respectively exceeded the maximal allowed age.
 Jenetics uses the Java 
\family typewriter
Random
\family default
 object for generating random numbers.
 To make the random engine pluggable, the 
\family typewriter
Random
\family default
 object is always fetched from the 
\family typewriter
RandomRegistry
\family default
.
 This makes it possible to change the implementation of the random engine
 without changing the client code.
 In interaction with the 
\family typewriter
LocalContext
\family default
 class from the Javolution project, you can easily change the random engine
 only for some parts of the code.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Factory<Genotype<Float64Gene>> factory = Genotype.valueOf(
\end_layout

\begin_layout Plain Layout

    new Float64Chromosome(0.0, 100.0, 10)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\begin_layout Plain Layout

List<Genotype<Float64Gene>> genotypes = new ArrayList<>();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

LocalContext.enter();
\end_layout

\begin_layout Plain Layout

try {
\end_layout

\begin_layout Plain Layout

    RandomRegistry.setRandom(new Random(12345));
\end_layout

\begin_layout Plain Layout

    for (int i = 0; i < 100; ++i) {
\end_layout

\begin_layout Plain Layout

        genotypes.add(factory.newInstance());
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

} finally {
\end_layout

\begin_layout Plain Layout

    LocalContext.exit();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The example above shows how to create an random, but reproducible, list
 of genotypes.
 This might be useful while testing your application or when you want to
 run the GA several times with the same initial population.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Function<Genotype<Float64Gene>> ff = ...
\end_layout

\begin_layout Plain Layout

GeneticAlgorithm<Float64Gene, Float64> ga = new GeneticAlgorithm<>(
\end_layout

\begin_layout Plain Layout

    genotypes.get(0), ff
\end_layout

\begin_layout Plain Layout

);
\end_layout

\begin_layout Plain Layout

ga.setup(genotypes);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This example uses the generated genotypes to setup the initial population
 of the GA.
 The GA is created with the first element of the genotypes, which is used
 as genotype factory.
 This guarantees that the same kind of genotypes are created while evolving.
\end_layout

\begin_layout Subsection
Serialization
\end_layout

\begin_layout Standard

\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 has build-in XML serialization for a number of classes, all located in
 the 
\family typewriter
org.jenetics
\family default
 package:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
BitGene
\end_layout

\begin_layout Itemize

\family typewriter
CharacterGene
\end_layout

\begin_layout Itemize

\family typewriter
EnumGene
\end_layout

\begin_layout Itemize

\family typewriter
Float64Gene
\end_layout

\begin_layout Itemize

\family typewriter
Integer64Gene
\end_layout

\begin_layout Itemize

\family typewriter
BitChromosome
\end_layout

\begin_layout Itemize

\family typewriter
CharacterChromosome
\end_layout

\begin_layout Itemize

\family typewriter
PermutationChromosome
\end_layout

\begin_layout Itemize

\family typewriter
Float64Chromosome
\end_layout

\begin_layout Itemize

\family typewriter
Integer64Chomosome
\end_layout

\begin_layout Itemize

\family typewriter
Genotype
\end_layout

\begin_layout Itemize

\family typewriter
Phenotype
\end_layout

\begin_layout Itemize

\family typewriter
Population
\end_layout

\begin_layout Itemize

\family typewriter
Statistics
\end_layout

\begin_layout Itemize

\family typewriter
NumberStatistics
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Serialization of GA objects.
 
\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 allows you to write a population to disk and load it to a GA again and
 start evolving again.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Writing the population to disk.
\end_layout

\begin_layout Plain Layout

File file = new File("population.xml");
\end_layout

\begin_layout Plain Layout

IO.xml.write(ga.getPopulation(), file);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Reading the population from disk.
\end_layout

\begin_layout Plain Layout

Population<Float64Gene,Float64> population = 
\end_layout

\begin_layout Plain Layout

    (Population<Float64Gene, Float64)IO.xml.read(file);
\end_layout

\begin_layout Plain Layout

ga.setPopulation(population);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following listing shows the XML serialization of a population which
 consists of genotypes as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Genotype-structure"

\end_inset

 in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:Genotype"

\end_inset

.
 Only the first phenotype is shown.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
tiny}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting[language=XML]{code/population.xml}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
footnotesize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When serializing a whole population the fitness function and fitness scaler
 are not serialized.
 
\end_layout

\begin_layout Section
Examples
\end_layout

\begin_layout Standard
In this section contains some coding examples.
\end_layout

\begin_layout Subsection
Ones counting
\end_layout

\begin_layout Standard
Ones counting is one of the simplest model-problem and consists of a binary
 chromosome.
 The fitness of a Genotype is proportional to the number of ones.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class OneCounter implements Function<Genotype<BitGene>, Integer> {
\end_layout

\begin_layout Plain Layout

    @Override 		
\end_layout

\begin_layout Plain Layout

    public Integer apply(Genotype<BitGene> genotype) {
\end_layout

\begin_layout Plain Layout

        int count = 0;
\end_layout

\begin_layout Plain Layout

        for (BitGene gene : genotype.getChromosome()) {
\end_layout

\begin_layout Plain Layout

            if (gene.getBit()) {
\end_layout

\begin_layout Plain Layout

                ++count;
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        return count;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class OnesCounting {
\end_layout

\begin_layout Plain Layout

    public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

        final Factory<Genotype<BitGene>> gtf = Genotype.valueOf(
\end_layout

\begin_layout Plain Layout

            new BitChromosome(20, 0.3333)
\end_layout

\begin_layout Plain Layout

        );
\end_layout

\begin_layout Plain Layout

        final OneCounter ff = new OneCounter();
\end_layout

\begin_layout Plain Layout

        final GeneticAlgorithm<BitGene, Integer> ga = 
\end_layout

\begin_layout Plain Layout

            new GeneticAlgorithm<>(gtf, ff);
\end_layout

\begin_layout Plain Layout

        ga.setAlterer(new CompositeAlterer<>(
\end_layout

\begin_layout Plain Layout

            new Mutator<BitGene>(0.55),
\end_layout

\begin_layout Plain Layout

            new SinglePointChrosover<BitGene>(0.06)
\end_layout

\begin_layout Plain Layout

        ));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        ga.setup();
\end_layout

\begin_layout Plain Layout

        ga.evolve(100);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Real function
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class RealFunction 
\end_layout

\begin_layout Plain Layout

    implements Function<Genotype<Float64Gene>, Double> 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public Double apply(final Genotype<Float64> genotype) {
\end_layout

\begin_layout Plain Layout

        final double angle = genotype.getGene().doubleValue();
\end_layout

\begin_layout Plain Layout

        return cos(sin(angle)*cos(angle));
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Real {
\end_layout

\begin_layout Plain Layout

    public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

        final Factory<Genotype<Float64Gene>> gtf = Genotype.valueOf(
\end_layout

\begin_layout Plain Layout

            new Float64Chromosome(0.0, 2.0*PI)
\end_layout

\begin_layout Plain Layout

        );
\end_layout

\begin_layout Plain Layout

        final RealFunction ff = new RealFunction();
\end_layout

\begin_layout Plain Layout

        final GeneticAlgorithm<Float64Gene, Double> ga =
\end_layout

\begin_layout Plain Layout

            new GeneticAlgorithm<>(gtf, ff);
\end_layout

\begin_layout Plain Layout

        ga.setStatisticsCalculator(
\end_layout

\begin_layout Plain Layout

            new NumberStatistics.Calculator<Float64Gene, Double>()
\end_layout

\begin_layout Plain Layout

        );
\end_layout

\begin_layout Plain Layout

        ga.setFitnessScaler(SQR_SCALER);
\end_layout

\begin_layout Plain Layout

        ga.setPopulationSize(20);
\end_layout

\begin_layout Plain Layout

        ga.setAlterer(new Mutator<Float64Gene>(0.03));
\end_layout

\begin_layout Plain Layout

        ga.addAlterer(new MeanAlterer<Float64Gene>(0.6));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        ga.setup();
\end_layout

\begin_layout Plain Layout

        ga.evolve(100);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Knapsack
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{caption={Knapsack}}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{code/Knapsack.java}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "references"
options "bibtotoc,plain"

\end_inset


\end_layout

\end_body
\end_document
