#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{listings}
\usepackage{color}
 
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.3,0.3,0.3}
\definecolor{mauve}{rgb}{0.58,0,0.82}
\definecolor{keyword}{rgb}{0.5,0,0.5}
\definecolor{background}{rgb}{0.96,0.96,0.96}
 
\lstset{ %
  language=java, 
  basicstyle=\footnotesize, 
  numbers=left,  
  numberstyle=\footnotesize, 
  stepnumber=1,      
  numbersep=6pt, 
  rulesep=5pt,
  backgroundcolor=\color{background},
  showspaces=false,  
  showstringspaces=false, 
  showtabs=false,   
  frame=single,  
  frameshape={}{nny}{nny}{},
  %framexleftmargin=8pt,
  tabsize=4,    
  captionpos=b,     
  breaklines=true,     
  breakatwhitespace=false,  
  %title=\lstname,        
  numberstyle=\tiny\color{gray},   
  keywordstyle=\color{keyword}\bfseries, 
  commentstyle=\color{dkgreen}, 
  stringstyle=\color{mauve},
  escapeinside={\%*}{*)},  
  morekeywords={*,...} 
}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language danish
\papercolumns 1
\papersides 2
\paperpagestyle headings
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict true
\end_header

\begin_body

\begin_layout Title
Jenetics
\end_layout

\begin_layout Author
Franz Wilhelmst√∂tter
\end_layout

\begin_layout Abstract
Jenetics is an Genetic Algorithm Library written in Java.
 It is designed with a clear separation of the several concepts of the algorithm
, e.g.
 Gene, Chromosome, Genotype, Phenotype, Population and FitnessFunction.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphic/StructureClassDiagram.svg
	lyxscale 70
	height 45theight%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Structure-diagram"

\end_inset

Structure diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Structure-diagram"

\end_inset

 shows the main data structures of the GA implementation.
 The Gene is the base of the class structure.
 Genes are aggregated in Chromosomes.
 One to n Chromosomes are aggregated in Genotypes.
 A Genotype and a fitness function from the Phenotype are collected into
 a Population.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

Create initial population
\end_layout

\begin_layout Plain Layout

Calculate fitness for initial population
\end_layout

\begin_layout Plain Layout

while not finished:
\end_layout

\begin_layout Plain Layout

    Select survivors and offsprings
\end_layout

\begin_layout Plain Layout

    Alter offspring population
\end_layout

\begin_layout Plain Layout

    Create new individuals for invalid and dead individuals
\end_layout

\begin_layout Plain Layout

    Calculate fitness for new population
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Simple GA Setup
\end_layout

\begin_layout Standard
The minimum GA setup needs a Genotype Factory and a Fitness Function.
 The Genotype implements the Factory interface and can be used as prototype.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "extendedchars=true,language=Java,numbers=left,stepnumber=1,tabsize=4"
inline false
status open

\begin_layout Plain Layout

final Factory<Genotype<BitGene>> gtf = Genotype.valueOf(
\end_layout

\begin_layout Plain Layout

    BitChromosome.valueOf(10, 0.5)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\begin_layout Plain Layout

final Function<Genotype<BitGene>, Float64> ff = ...
\end_layout

\begin_layout Plain Layout

final GeneticAlgorithm<BitGene, Float64> 
\end_layout

\begin_layout Plain Layout

ga = new GeneticAlgorithm<>(gtf, ff)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
Genotype
\family default
 
\family typewriter
Factory
\family default
 gtf in this example will create genotypes which consits of a 
\family typewriter
BitChromosome
\family default
 of length 10.
 The one to zero probability of the newly created genotypes are set to 0.5.
 The fitness function is parameterized with 
\family typewriter
BitGene
\family default
 and 
\family typewriter
Float64
\family default
.
 That meas that the function is calculaating the fitness value, which is
 a Comparable.
 Now we are donee.
 A new GA instance can be created with the genotype-factory and the fitness-func
tion.
 For starting the evolution just call 
\family typewriter
ga.setup()
\family default
 and 
\family typewriter
ga.evolve(100)
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ga.setup();
\end_layout

\begin_layout Plain Layout

ga.evolve(100);
\end_layout

\begin_layout Plain Layout

System.out.println(ga);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
GeneticAlgorithm.setup()
\family default
 call creates the initial popullation and calculates its fitness.
 Then the GA evolves 100 generations an prints the (last) population statistics.
 
\end_layout

\begin_layout Standard
In a more advanced setup you want to define mutation and/or selection strategies.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ga.setSelectors(new TournamentSelector<BitGene>(5));
\end_layout

\begin_layout Plain Layout

ga.setAlterer(new SinglePointCrossover<BitGene>(0.1));
\end_layout

\begin_layout Plain Layout

ga.addAlterer(new Mutation<BitGene>(0.01));
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Alterers are concatenated, first the crossove (with corssober probability
 0.1) is performed and then the chromosomes are mutated (with probability
 0.01).
\end_layout

\begin_layout Section
Basic classes
\end_layout

\begin_layout Paragraph*
GeneticAlgorithm
\end_layout

\begin_layout Paragraph*
Alterer
\end_layout

\begin_layout Section
Multithreading
\end_layout

\begin_layout Standard
The fitness calculation is performed concurrently.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Concurrency.setForkJoinPool(new ForkJoinPool());
\end_layout

\end_inset


\end_layout

\begin_layout Section
Examples
\end_layout

\begin_layout Subsection
Knapsack
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{caption={Knapsack}}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{code/Knapsack.java}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
