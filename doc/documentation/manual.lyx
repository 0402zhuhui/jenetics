#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{listings}
\usepackage{color}
 
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.3,0.3,0.3}
\definecolor{mauve}{rgb}{0.58,0,0.82}
\definecolor{keyword}{rgb}{0.5,0,0.5}
\definecolor{background}{rgb}{0.96,0.96,0.96}
 
\lstset{ %
  language=java, 
  basicstyle=\footnotesize, 
  numbers=left,  
  numberstyle=\footnotesize, 
  stepnumber=1,      
  numbersep=6pt, 
  rulesep=5pt,
  backgroundcolor=\color{background},
  showspaces=false,  
  showstringspaces=false, 
  showtabs=false,   
  frame=single,  
  frameshape={}{nny}{nny}{},
  %framexleftmargin=8pt,
  tabsize=4,    
  captionpos=b,     
  breaklines=true,     
  breakatwhitespace=false,  
  %title=\lstname,        
  numberstyle=\tiny\color{gray},   
  keywordstyle=\color{keyword}\bfseries, 
  commentstyle=\color{dkgreen}, 
  stringstyle=\color{mauve},
  escapeinside={\%*}{*)},  
  morekeywords={*,...} 
}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language danish
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict true
\end_header

\begin_body

\begin_layout Title
Jenetics
\end_layout

\begin_layout Date
Version 0.9.0.0
\end_layout

\begin_layout Author
Franz Wilhelmst√∂tter
\end_layout

\begin_layout Abstract

\shape smallcaps
Jenetics
\shape default
 is an Genetic Algorithm Library written in Java.
 It is designed with a clear separation of the several concepts of the algorithm
, e.g.
 
\family typewriter
Gene
\family default
, 
\family typewriter
Chromosome
\family default
, 
\family typewriter
Genotype
\family default
, 
\family typewriter
Phenotype
\family default
, 
\family typewriter
Population
\family default
 and Fitness-
\family typewriter
Function
\family default
.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The 
\shape smallcaps
Jenetics
\shape default
 project provides an 
\begin_inset CommandInset href
LatexCommand href
name "genetic algorithm"
target "http://en.wikipedia.org/wiki/Genetic_algorithm"

\end_inset

 (GA) implementation.
 Genetic algorithms was first proposed and analyzed by 
\begin_inset CommandInset href
LatexCommand href
name "John Holland"
target "http://en.wikipedia.org/wiki/John_Henry_Holland"

\end_inset

 in 1975.
\end_layout

\begin_layout Subsection
Design
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "extendedchars=true,language=C,mathescape=true,numbers=left,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

$P_{0} 
\backslash
leftarrow P_{initial}$
\end_layout

\begin_layout Plain Layout

$F_{f}(P_{0})$
\end_layout

\begin_layout Plain Layout

while !finished:
\end_layout

\begin_layout Plain Layout

    $i 
\backslash
leftarrow i + 1$
\end_layout

\begin_layout Plain Layout

    $S_i 
\backslash
leftarrow select_{survivors}(P_{i - 1})$
\end_layout

\begin_layout Plain Layout

    $O_i 
\backslash
leftarrow alter(select_{offsprings}(P_{i - 1}))$
\end_layout

\begin_layout Plain Layout

    $P_i 
\backslash
leftarrow S_i + O_i$
\end_layout

\begin_layout Plain Layout

    $F_{f}(P_{i})$
\end_layout

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Genetic-algorithm"

\end_inset

Genetic algorithm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are more than one way to perform the basic operations of an genetic
 algorithm.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Genetic-algorithm"

\end_inset

 shows the steps of the 
\shape smallcaps
Jenetics
\shape default
 genetic algorithm.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphic/StructureClassDiagram.svg
	lyxscale 70
	height 45theight%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Structure-diagram"

\end_inset

Structure diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Structure-diagram"

\end_inset

 shows the main data structures of the GA.
 The Gene is the base of the class structure.
 Genes are aggregated in Chromosomes.
 One to n Chromosomes are aggregated in Genotypes.
 A Genotype and a fitness function from the Phenotype are collected into
 a Population.
\end_layout

\begin_layout Subsection
Simple setup
\end_layout

\begin_layout Standard
The minimum GA setup needs a 
\family typewriter
Genotype
\family default
, 
\family typewriter
Factory
\family default
 and a fitness 
\family typewriter
Function
\family default
.
 The 
\family typewriter
Genotype
\family default
 implements the 
\family typewriter
Factory
\family default
 interface and is used as prototype for creating the initial 
\family typewriter
Population
\family default
 and for creating new, random 
\family typewriter
Genotype
\family default
s.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "extendedchars=true,language=Java,numbers=left,stepnumber=1,tabsize=4"
inline false
status open

\begin_layout Plain Layout

public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

    final Factory<Genotype<BitGene>> gtf = Genotype.valueOf(
\end_layout

\begin_layout Plain Layout

        BitChromosome.valueOf(10, 0.5)
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\begin_layout Plain Layout

    final Function<Genotype<BitGene>, Double> ff = ...
\end_layout

\begin_layout Plain Layout

    final GeneticAlgorithm<BitGene, Double> 
\end_layout

\begin_layout Plain Layout

    ga = new GeneticAlgorithm<>(gtf, ff)
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    ga.setup();
\end_layout

\begin_layout Plain Layout

    ga.evolve(100);
\end_layout

\begin_layout Plain Layout

    System.out.println(ga);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
Genotype
\family default
 
\family typewriter
Factory
\family default
 
\family typewriter
gtf
\family default
 in this example will create genotypes which consits of one 
\family typewriter
BitChromosome
\family default
 with length 10.
 The one to zero probability of the newly created genotypes is set to 0.5.
 The fitness 
\family typewriter
Function
\family default
 is parameterized with a 
\family typewriter
BitGene
\family default
 and a 
\family typewriter
Double
\family default
.
 That means that the fitness 
\family typewriter
Function
\family default
 is calculating the fitness value as 
\family typewriter
Double
\family default
.
 At least, the fitness value must be at least a 
\family typewriter
Comparable
\family default
.
 The 
\family typewriter
GeneticAlgorithm
\family default
 must be created with the genotype-factory and the fitness-function.
 For starting the evolution just call 
\family typewriter
ga.setup()
\family default
 and 
\family typewriter
ga.evolve(100)
\family default
.
 The 
\family typewriter
ga.setup()
\family default
 call creates the initial population and calculates its fitness.
 Then the GA evolves 100 generations an prints the last population statistics.
 
\end_layout

\begin_layout Standard
In a more advanced setup you want to define mutation and/or selection strategies.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

    ga.setSelectors(new TournamentSelector<BitGene>(5));
\end_layout

\begin_layout Plain Layout

    ga.setAlterer(new SinglePointCrossover<BitGene>(0.1));
\end_layout

\begin_layout Plain Layout

    ga.addAlterer(new Mutation<BitGene>(0.01));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    ga.setup();
\end_layout

\begin_layout Plain Layout

    ga.evolve(100);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Alterers are concatenated, first the crossover (with corsage probability
 0.1) is performed and then the chromosomes are mutated (with probability
 0.01).
\end_layout

\begin_layout Section
Genetic operators
\end_layout

\begin_layout Subsection
Mutation
\end_layout

\begin_layout Standard
There are two distinct roles 
\emph on
mutation
\emph default
 plays in a Genetic algorithm:
\end_layout

\begin_layout Enumerate
Exploring the search space.
 By making small moves mutation allows a population to explore the search
 space.
 This exploration is often slow compared to crossover, but in problems where
 crossover is disruptive this can be an important way to explore the landscape.
 
\end_layout

\begin_layout Enumerate
Maintaining diversity.
 Mutation prevents a population from correlating.
 Even if most of the search is being performed by crossover, mutation can
 be vital to provide the diversity which crossover needs.
 
\end_layout

\begin_layout Standard
The mutation probability 
\begin_inset Formula $P$
\end_inset

 is the parameter that must be optimized.
 The optimal value of the mutation rate depends on the role mutation plays.
 If mutation is the only source of exploration (if there is no crossover)
 then the mutation rate should be set so that a reasonable neighborhood
 of solutions is explored.
\end_layout

\begin_layout Standard
The mutation probability 
\begin_inset Formula $P$
\end_inset

 is the probability that a specific gene over the whole population is mutated.
 The number of available genes of an population is 
\begin_inset Formula 
\begin{equation}
N_{G}=n_{P}\centerdot n_{C}\centerdot n_{G}
\end{equation}

\end_inset

where 
\begin_inset Formula $n_{P}$
\end_inset

 is the population size, 
\begin_inset Formula $n_{C}$
\end_inset

 the number of chromosomes of the genotype and 
\begin_inset Formula $n_{G}$
\end_inset

 the number of genes in the chromosome.
 That means, the (average) number of genes mutated by an mutator is
\begin_inset Formula 
\begin{equation}
\hat{\mu}=N_{G}\centerdot P
\end{equation}

\end_inset


\end_layout

\begin_layout Paragraph

\family typewriter
Mutator
\end_layout

\begin_layout Standard
The 
\family typewriter
Mutator
\family default
 class has to deal with the problem, that the genes are arranged in a 
\shape italic
3-dimensional
\shape default
 structure (population: genotype 
\begin_inset Formula $\rightarrow$
\end_inset

 chromosome 
\begin_inset Formula $\rightarrow$
\end_inset

 gene).
 The mutator selects the gene which will be mutated in three steps:
\end_layout

\begin_layout Enumerate
Select a genotype 
\begin_inset Formula $Gt$
\end_inset

 from the population with probability 
\begin_inset Formula $P_{Gt}$
\end_inset

,
\end_layout

\begin_layout Enumerate
select a chromosome 
\begin_inset Formula $C$
\end_inset

 from the selected genotype 
\begin_inset Formula $Gt$
\end_inset

 with probability 
\begin_inset Formula $P_{C}$
\end_inset

 and
\end_layout

\begin_layout Enumerate
select a gene 
\begin_inset Formula $G$
\end_inset

 from the selected chromosome 
\begin_inset Formula $C$
\end_inset

 with probability 
\begin_inset Formula $P_{G}$
\end_inset

.
\end_layout

\begin_layout Standard
The needed sub-selection probabilities are set to 
\begin_inset Formula 
\begin{equation}
P_{Gt}=P_{C}=P_{G}=\sqrt[3]{P}
\end{equation}

\end_inset


\end_layout

\begin_layout Paragraph

\family typewriter
GaussianMutator
\end_layout

\begin_layout Standard
The 
\family typewriter
GaussianMutator
\family default
 class performs the mutation of a 
\family typewriter
NumberGene
\family default
.
 This mutator picks a new value based on a Gaussian distribution around
 the current value of the gene.
 The variance of the new value (before clipping to the allowed gene range)
 will be 
\begin_inset Formula 
\begin{equation}
\hat{\sigma}^{2}=\left(\frac{G_{max}-G_{min}}{4}\right)^{2}
\end{equation}

\end_inset

where 
\begin_inset Formula $G_{min}$
\end_inset

 and 
\begin_inset Formula $G_{max}$
\end_inset

 are the valid minimum and maximum values of the number gene.
 The new value will be cropped to the gene's boundaries.
\end_layout

\begin_layout Paragraph

\family typewriter
SwapMutator
\end_layout

\begin_layout Standard
The 
\family typewriter
SwapMutator
\family default
 class changes the order of genes in a chromosome, with the hope of bringing
 related genes closer together, thereby facilitating the production of building
 blocks.
 This mutation operator can also be used for combinatorial problems, where
 no duplicated genes within a chromosome are allowed, e.g.
 for the TSP.
 
\end_layout

\begin_layout Section
Concurrency
\end_layout

\begin_layout Standard
The Jenetics library tries to parallelize independent task whenever possible.
 It uses the 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
name "ConcurrentContext"
target "http://javolution.org/target/site/apidocs/javolution/context/ConcurrentContext.html"

\end_inset

 
\family default
from the 
\begin_inset CommandInset href
LatexCommand href
name "Javolution"
target "http://javolution.org/"

\end_inset

 library for concurrent task execution.
 In the default configuration the 
\family typewriter
ConcurrentContext
\family default
 utilizes all available
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This is defined by 
\family typewriter
Runtime.getRuntime().availableProcessors()
\family default
.
\end_layout

\end_inset

 cores of the target machine.
 If you want to change the number of used cores you must do this before
 the GA initialization.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

    final int parallelism = 10;
\end_layout

\begin_layout Plain Layout

    Concurrency.setConcurrency(parallelism);
\end_layout

\begin_layout Plain Layout

    // ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
ConcurrentContext
\family default
 uses it's own--optimized--thread-pool implementation, but you have the
 possibility to replace this with the JDKs 
\family typewriter
ForkJoinPool
\family default
.
 This allows you to use the same thread-pool for the GA and 
\shape italic
other
\shape default
 concurrent task.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

    final int parallelism = 10;
\end_layout

\begin_layout Plain Layout

    final ForkJoinPool pool = new ForkJoinPool(parallelism);
\end_layout

\begin_layout Plain Layout

    Concurrency.setForkJoinPool(pool)
\end_layout

\begin_layout Plain Layout

    // ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
aslfk as√∂ldfka √∂lsdkf a√§√∂lsdkf √∂alsdkf 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ConcurrentContext.enter();
\end_layout

\begin_layout Plain Layout

try {
\end_layout

\begin_layout Plain Layout

    ConcurrentContext.execute(new Runnable() { public void run() {
\end_layout

\begin_layout Plain Layout

        // Do some work
\end_layout

\begin_layout Plain Layout

    }});
\end_layout

\begin_layout Plain Layout

} finally {
\end_layout

\begin_layout Plain Layout

    ConcurrentContext.exit();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The fitness calculation is performed concurrently.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try (Concurrency c = Concurrency.start()) {
\end_layout

\begin_layout Plain Layout

    c.execute(task1);
\end_layout

\begin_layout Plain Layout

    c.execute(taks2);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Examples
\end_layout

\begin_layout Subsection
Knapsack
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{caption={Knapsack}}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{code/Knapsack.java}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
