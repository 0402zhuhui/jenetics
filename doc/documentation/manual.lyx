#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{listings}
\usepackage{color}
\usepackage{url}
 
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.3,0.3,0.3}
\definecolor{mauve}{rgb}{0.58,0,0.82}
\definecolor{keyword}{rgb}{0.5,0,0.5}
\definecolor{background}{rgb}{0.96,0.96,0.96}
 
\lstset{ %
  language=java, 
  basicstyle=\footnotesize, 
  numbers=left,  
  numberstyle=\footnotesize, 
  stepnumber=1,      
  numbersep=6pt, 
  rulesep=5pt,
  backgroundcolor=\color{background},
  showspaces=false,  
  showstringspaces=false, 
  showtabs=false,   
  frame=single,  
  frameshape={}{nny}{nny}{},
  %framexleftmargin=8pt,
  tabsize=4,    
  captionpos=b,     
  breaklines=true,     
  breakatwhitespace=false,  
  %title=\lstname,        
  numberstyle=\tiny\color{gray},   
  keywordstyle=\color{keyword}\bfseries, 
  commentstyle=\color{dkgreen}, 
  stringstyle=\color{mauve},
  escapeinside={\%*}{*)},  
  morekeywords={*,...} 
}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language danish
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict true
\end_header

\begin_body

\begin_layout Title
Jenetics
\end_layout

\begin_layout Date
Version 0.9.0.0
\end_layout

\begin_layout Author
Franz Wilhelmst√∂tter
\end_layout

\begin_layout Abstract

\shape smallcaps
Jenetics
\shape default
 is an 
\series bold
Genetic Algorithm
\series default
 Library written in Java.
 It is designed with a clear separation of the several concepts of the algorithm
, e.g.
 
\family typewriter
Gene
\family default
, 
\family typewriter
Chromosome
\family default
, 
\family typewriter
Genotype
\family default
, 
\family typewriter
Phenotype
\family default
, 
\family typewriter
Population
\family default
 and Fitness-
\family typewriter
Function
\family default
.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The 
\shape smallcaps
Jenetics
\shape default
 project is a Java library which provides an 
\begin_inset CommandInset href
LatexCommand href
name "genetic algorithm"
target "http://en.wikipedia.org/wiki/Genetic_algorithm"

\end_inset

 (GA) implementation.
 Genetic algorithms was first proposed and analyzed by 
\begin_inset CommandInset href
LatexCommand href
name "John Holland"
target "http://en.wikipedia.org/wiki/John_Henry_Holland"

\end_inset

 in 1975.
 This document is not an introduction or a tutorial for genetic algorithms.
 It is assumed that the reader has a knowledge about the structure and the
 functionality of genetic algorithms.
 A good GA introduction can be found in 
\begin_inset CommandInset citation
LatexCommand cite
key "Sivanandam2010"

\end_inset

, 
\begin_inset CommandInset citation
LatexCommand cite
key "michalewicz1996genetic"

\end_inset

 and 
\begin_inset CommandInset citation
LatexCommand cite
key "Whitley94agenetic"

\end_inset

.
\end_layout

\begin_layout Subsection
Design
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "extendedchars=true,language=C,mathescape=true,numbers=left,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

$P_{0} 
\backslash
leftarrow P_{initial}$
\end_layout

\begin_layout Plain Layout

$F(P_{0})$
\end_layout

\begin_layout Plain Layout

while !finished:
\end_layout

\begin_layout Plain Layout

    $g 
\backslash
leftarrow g + 1$
\end_layout

\begin_layout Plain Layout

    $S_g 
\backslash
leftarrow select_{S}(P_{g - 1})$
\end_layout

\begin_layout Plain Layout

    $O_g 
\backslash
leftarrow alter(select_{O}(P_{g - 1}))$
\end_layout

\begin_layout Plain Layout

    $P_g 
\backslash
leftarrow filter[g_i<g_{max}]((S_g)) + filter[g_i<g_{max}](O_g)$
\end_layout

\begin_layout Plain Layout

    $F(P_g)$
\end_layout

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Genetic-algorithm"

\end_inset

Genetic algorithm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Genetic-algorithm"

\end_inset

 shows the steps of the 
\shape smallcaps
Jenetics
\shape default
 genetic algorithm.
 In the first two lines the initial population is created and the fitness
 value is calculated.
 This is done by the 
\family typewriter
GeneticAlgorithm.setup()
\family default
 method.
 The steps from line 4 to 8 are repeated until a given termination criterion
 is fulfilled.
 Line 5 selects the survivor population which will be passed to the next
 generation without change.
 (The survivor/offspring fraction is set with GeneticAlgorithm.setOffspringFracti
on(double)).
 The offsprings are selected and altered and are merged with the survivors
 to the new population.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphic/StructureClassDiagram.svg
	lyxscale 70
	height 45theight%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Structure-diagram"

\end_inset

Structure diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Structure-diagram"

\end_inset

 shows the main data structures of the GA.
 The Gene is the base of the class structure.
 Genes are aggregated in Chromosomes.
 One to n Chromosomes are aggregated in Genotypes.
 A Genotype and a fitness function from the Phenotype are collected into
 a Population.
\end_layout

\begin_layout Subsection
Simple setup
\end_layout

\begin_layout Standard
The minimum GA setup needs a 
\family typewriter
Genotype
\family default
, 
\family typewriter
Factory
\family default
 and a fitness 
\family typewriter
Function
\family default
.
 The 
\family typewriter
Genotype
\family default
 implements the 
\family typewriter
Factory
\family default
 interface and is used as prototype for creating the initial 
\family typewriter
Population
\family default
 and for creating new, random 
\family typewriter
Genotype
\family default
s.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "extendedchars=true,language=Java,numbers=left,stepnumber=1,tabsize=4"
inline false
status open

\begin_layout Plain Layout

public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

    final Factory<Genotype<BitGene>> gtf = Genotype.valueOf(
\end_layout

\begin_layout Plain Layout

        BitChromosome.valueOf(10, 0.5)
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\begin_layout Plain Layout

    final Function<Genotype<BitGene>, Double> ff = ...
\end_layout

\begin_layout Plain Layout

    final GeneticAlgorithm<BitGene, Double> 
\end_layout

\begin_layout Plain Layout

    ga = new GeneticAlgorithm<>(gtf, ff)
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    ga.setup();
\end_layout

\begin_layout Plain Layout

    ga.evolve(100);
\end_layout

\begin_layout Plain Layout

    System.out.println(ga);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
Genotype
\family default
 
\family typewriter
Factory
\family default
 
\family typewriter
gtf
\family default
 in this example will create genotypes which consits of one 
\family typewriter
BitChromosome
\family default
 with length 10.
 The one to zero probability of the newly created genotypes is set to 0.5.
 The fitness 
\family typewriter
Function
\family default
 is parameterized with a 
\family typewriter
BitGene
\family default
 and a 
\family typewriter
Double
\family default
.
 That means that the fitness 
\family typewriter
Function
\family default
 is calculating the fitness value as 
\family typewriter
Double
\family default
.
 At least, the fitness value must be at least a 
\family typewriter
Comparable
\family default
.
 The 
\family typewriter
GeneticAlgorithm
\family default
 must be created with the genotype-factory and the fitness-function.
 For starting the evolution just call 
\family typewriter
ga.setup()
\family default
 and 
\family typewriter
ga.evolve(100)
\family default
.
 The 
\family typewriter
ga.setup()
\family default
 call creates the initial population and calculates its fitness.
 Then the GA evolves 100 generations an prints the last population statistics.
 
\end_layout

\begin_layout Standard
In a more advanced setup you want to define mutation and/or selection strategies.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

    ga.setSelectors(new TournamentSelector<BitGene>(5));
\end_layout

\begin_layout Plain Layout

    ga.setAlterer(new SinglePointCrossover<BitGene>(0.1));
\end_layout

\begin_layout Plain Layout

    ga.addAlterer(new Mutation<BitGene>(0.01));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    ga.setup();
\end_layout

\begin_layout Plain Layout

    ga.evolve(100);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Alterers are concatenated, first the crossover (with corsage probability
 0.1) is performed and then the chromosomes are mutated (with probability
 0.01).
\end_layout

\begin_layout Section
Genetic operators
\end_layout

\begin_layout Subsection
Select
\end_layout

\begin_layout Standard
Selectors are responsible for selecting a given number of genotypes (chromosomes
) from the population.
 You can define different selectors for offsprings and for the survivors.
\end_layout

\begin_layout Paragraph

\family typewriter
TournamentSelector
\end_layout

\begin_layout Standard
In tournament selection the best Phenotype from a random sample of s individuals
 is chosen for the next generation.
 The samples are drawn (in this class) without replacement.
 An individual will win a tournament only if its fitness is greater than
 the fitness of the other s-1 competitors.
 Note that the worst Phenotype individual never survives, and the best Phenotype
 individual wins in all the tournaments it participates.
\end_layout

\begin_layout Paragraph

\family typewriter
TruncationSelector
\end_layout

\begin_layout Standard
In truncation selection individuals are sorted according to their fitness.
 Only the best individuals are selected.
\end_layout

\begin_layout Paragraph

\family typewriter
MonteCarloSelector
\end_layout

\begin_layout Standard
Select the phenotypes from a given population randomly.
 This class can be used to measure the performance of an other given selector.
\end_layout

\begin_layout Subsubsection
Probability selector
\end_layout

\begin_layout Standard
Probability selectors selects individuals from a given population based
 on a selection probability 
\begin_inset Formula $p_{i}$
\end_inset

, which is assigned to each individual 
\begin_inset Formula $i$
\end_inset

.
 The selection probability of an individual 
\begin_inset Formula $i$
\end_inset

 follows a binomial distribution 
\begin_inset Formula 
\begin{equation}
p_{i}(k)=\left(\begin{array}{c}
n\\
k
\end{array}\right)p_{i}^{k}\left(1-p_{i}\right)^{n-k}
\end{equation}

\end_inset

where 
\begin_inset Formula $n$
\end_inset

 is the number of selected individuals and 
\begin_inset Formula $k$
\end_inset

 the number of individual 
\begin_inset Formula $i$
\end_inset

.
\end_layout

\begin_layout Paragraph

\family typewriter
LinearRankSelector
\end_layout

\begin_layout Standard
In linear ranking selection, individuals (phenotypes) are sorted according
 to their fitness values and the rank N is assignee to the best Phenotype
 individual and the rank 1 to the worst Phenotype.
 The selection probability is linearly assigned to the individuals according
 to their rank.
 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
p_{i}=\frac{1}{N}\left(n_{m}+\left(n_{p}-n_{m}\right)\frac{i-1}{N-1}\right)
\end{equation}

\end_inset

Here 
\begin_inset Formula $\frac{n_{m}}{N}$
\end_inset

 is the probability of the worst individual to be selected and 
\begin_inset Formula $\frac{n_{p}}{N}$
\end_inset

 the probability of the best individual to be selected.
 As the population size is held constant, the condition 
\begin_inset Formula $n_{p}=2-n_{m}$
\end_inset

 and 
\begin_inset Formula $n_{m}\geq0$
\end_inset

 must be fulfilled.
 Note that all individuals get a different rank, i.e., a different selection
 probability, even they have the same fitness value.
\begin_inset CommandInset citation
LatexCommand cite
key "Blickle97acomparison"

\end_inset


\end_layout

\begin_layout Paragraph

\family typewriter
ExponentialRankSelector
\family default
 
\end_layout

\begin_layout Standard
An alternative to the "weak" LinearRankSelector is to assign survival probabilit
ies to the sorted individuals using an exponential function.
 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
p_{i}=\left(c-1\right)\frac{c^{i-1}}{c^{N}-1}
\end{equation}

\end_inset

where 
\begin_inset Formula $c$
\end_inset

 must within the range 
\begin_inset Formula $\left[0\ldots1\right)$
\end_inset

.
 A small value of 
\begin_inset Formula $c$
\end_inset

 increases the probability of the best phenotypes to be selected.
 If c is set to zero, the selection probability of the best phenotype is
 set to one.
 The selection probability of all other phenotypes is zero.
 A value near one equalizes the selection probabilities.
 
\end_layout

\begin_layout Standard
This selector sorts the population in descending order while calculating
 the selection probabilities.
 
\end_layout

\begin_layout Paragraph

\family typewriter
BoltzmannSelector
\end_layout

\begin_layout Standard
The selection probability is defined as 
\begin_inset Formula 
\begin{equation}
p_{i}=\frac{\exp(b\cdot f_{i})}{Z}
\end{equation}

\end_inset

where 
\begin_inset Formula $b$
\end_inset

 controls the selection intensity and 
\begin_inset Formula 
\begin{equation}
Z=\sum_{i=1}^{n}\exp(f_{i})
\end{equation}

\end_inset


\begin_inset Formula $f_{i}$
\end_inset

 denotes the fitness of the individual 
\begin_inset Formula $i$
\end_inset

.
 Positive values of 
\begin_inset Formula $b$
\end_inset

 increases the selection probability of individuals with high fitness values
 and negative values of 
\begin_inset Formula $b$
\end_inset

 decreases it.
 If 
\begin_inset Formula $b$
\end_inset

 is zero, the selection probability of all individuals is set to 
\begin_inset Formula $\frac{1}{N}$
\end_inset

.
\end_layout

\begin_layout Paragraph

\family typewriter
RouletteWheelSelector
\end_layout

\begin_layout Standard
xxx
\end_layout

\begin_layout Paragraph

\family typewriter
StochasticUniversalSelector
\end_layout

\begin_layout Standard
xxx
\end_layout

\begin_layout Subsection
Alter
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Genetic operators"
target "https://en.wikipedia.org/wiki/Genetic_operator"

\end_inset

 are responsible for the genetic diversity of the genetic algorithm.
 The genetic operator types used in 
\shape smallcaps
Jenetics
\shape default
 are
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset href
LatexCommand href
name "mutation"
target "https://en.wikipedia.org/wiki/Mutation_(genetic_algorithm)"

\end_inset

 and
\end_layout

\begin_layout Enumerate
recombination (e.g.
 
\begin_inset CommandInset href
LatexCommand href
name "crossover"
target "https://en.wikipedia.org/wiki/Crossover_(genetic_algorithm)"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphic/GeneticOperatorClassDiagram.svg
	lyxscale 70
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Genetic operators
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Mutation
\end_layout

\begin_layout Standard
There are two distinct roles 
\emph on
mutation
\emph default
 plays in a Genetic algorithm:
\end_layout

\begin_layout Enumerate
Exploring the search space.
 By making small moves mutation allows a population to explore the search
 space.
 This exploration is often slow compared to crossover, but in problems where
 crossover is disruptive this can be an important way to explore the landscape.
 
\end_layout

\begin_layout Enumerate
Maintaining diversity.
 Mutation prevents a population from correlating.
 Even if most of the search is being performed by crossover, mutation can
 be vital to provide the diversity which crossover needs.
 
\end_layout

\begin_layout Standard
The mutation probability 
\begin_inset Formula $P$
\end_inset

 is the parameter that must be optimized.
 The optimal value of the mutation rate depends on the role mutation plays.
 If mutation is the only source of exploration (if there is no crossover)
 then the mutation rate should be set so that a reasonable neighborhood
 of solutions is explored.
\end_layout

\begin_layout Standard
The mutation probability 
\begin_inset Formula $P$
\end_inset

 is the probability that a specific gene over the whole population is mutated.
 The number of available genes of an population is 
\begin_inset Formula 
\begin{equation}
N_{G}=n_{P}\cdot n_{C}\cdot n_{G}
\end{equation}

\end_inset

where 
\begin_inset Formula $n_{P}$
\end_inset

 is the population size, 
\begin_inset Formula $n_{C}$
\end_inset

 the number of chromosomes of the genotype and 
\begin_inset Formula $n_{G}$
\end_inset

 the number of genes in the chromosome.
 That means, the (average) number of genes mutated by an mutator is
\begin_inset Formula 
\begin{equation}
\hat{\mu}=N_{G}\cdot P
\end{equation}

\end_inset


\end_layout

\begin_layout Paragraph

\family typewriter
Mutator
\end_layout

\begin_layout Standard
The 
\family typewriter
Mutator
\family default
 class has to deal with the problem, that the genes are arranged in a 
\shape italic
3-dimensional
\shape default
 structure (population: genotype 
\begin_inset Formula $\rightarrow$
\end_inset

 chromosome 
\begin_inset Formula $\rightarrow$
\end_inset

 gene).
 The mutator selects the gene which will be mutated in three steps:
\end_layout

\begin_layout Enumerate
Select a genotype 
\begin_inset Formula $Gt$
\end_inset

 from the population with probability 
\begin_inset Formula $P_{Gt}$
\end_inset

,
\end_layout

\begin_layout Enumerate
select a chromosome 
\begin_inset Formula $C$
\end_inset

 from the selected genotype 
\begin_inset Formula $Gt$
\end_inset

 with probability 
\begin_inset Formula $P_{C}$
\end_inset

 and
\end_layout

\begin_layout Enumerate
select a gene 
\begin_inset Formula $G$
\end_inset

 from the selected chromosome 
\begin_inset Formula $C$
\end_inset

 with probability 
\begin_inset Formula $P_{G}$
\end_inset

.
\end_layout

\begin_layout Standard
The needed sub-selection probabilities are set to 
\begin_inset Formula 
\begin{equation}
P_{Gt}=P_{C}=P_{G}=\sqrt[3]{P}
\end{equation}

\end_inset


\end_layout

\begin_layout Paragraph

\family typewriter
GaussianMutator
\end_layout

\begin_layout Standard
The 
\family typewriter
GaussianMutator
\family default
 class performs the mutation of a 
\family typewriter
NumberGene
\family default
.
 This mutator picks a new value based on a Gaussian distribution around
 the current value of the gene.
 The variance of the new value (before clipping to the allowed gene range)
 will be 
\begin_inset Formula 
\begin{equation}
\hat{\sigma}^{2}=\left(\frac{G_{max}-G_{min}}{4}\right)^{2}
\end{equation}

\end_inset

where 
\begin_inset Formula $G_{min}$
\end_inset

 and 
\begin_inset Formula $G_{max}$
\end_inset

 are the valid minimum and maximum values of the number gene.
 The new value will be cropped to the gene's boundaries.
\end_layout

\begin_layout Paragraph

\family typewriter
SwapMutator
\end_layout

\begin_layout Standard
The 
\family typewriter
SwapMutator
\family default
 class changes the order of genes in a chromosome, with the hope of bringing
 related genes closer together, thereby facilitating the production of building
 blocks.
 This mutation operator can also be used for combinatorial problems, where
 no duplicated genes within a chromosome are allowed, e.g.
 for the TSP.
 
\end_layout

\begin_layout Subsubsection
Recombination
\end_layout

\begin_layout Standard
An enhanced genetic algorithm (EGA) combine elements of existing solutions
 in order to create a new solution, with some of the properties of each
 parent.
 Recombination creates a new chromosome by combining parts of two (or more)
 parent chromosomes.
 This combination of chromosomes can be made by selecting one or more crossover
 points, splitting these chromosomes on the selected points, and merge those
 portions of different chromosomes to form new ones.
 
\end_layout

\begin_layout Standard
The recombination probability 
\begin_inset Formula $P$
\end_inset

 determines the probability that a given individual (genotype) of a population
 is selected for recombination.
 The (mean) number of changed individuals depend on the concrete implementation
 and can be vary from 
\begin_inset Formula $P\cdot N$
\end_inset

 to 
\begin_inset Formula $P\cdot N\cdot order$
\end_inset

.
 
\end_layout

\begin_layout Paragraph

\family typewriter
SinglePointCrossover
\end_layout

\begin_layout Standard
The 
\family typewriter
SinglePointCrossover
\family default
 class changes to children chromosomes by taking two chromosomes and cutting
 them at some, randomly chosen, site.
\end_layout

\begin_layout Standard
If we create a child and its complement we preserving the total number of
 genes in the population, preventing any genetic drift.
 Single-point crossover is the classic form of crossover.
 However, it produces very slow mixing compared with multi-point crossover
 or uniform crossover.
 For problems where the site position has some intrinsic meaning to the
 problem single-point crossover can lead to small disruption than multi-point
 or uniform crossover.
 
\end_layout

\begin_layout Paragraph

\family typewriter
PartiallyMatchedCrossover
\end_layout

\begin_layout Standard
The 
\family typewriter
PartiallyMatchedCrossover
\family default
 (PMX) class guarantees that all genes are found exactly once in each chromosome.
 No gene is duplicated by this crossover.
 The PMX can be applied usefully in the TSP or other permutation problem
 encodings.
 Permutation encoding is useful for all problems where the fitness only
 depends on the ordering of the genes within the chromosome.
 This is the case in many combinatorial optimization problems.
 Other crossover operators for combinatorial optimization are:
\end_layout

\begin_layout Itemize
order crossover
\end_layout

\begin_layout Itemize
cycle crossover
\end_layout

\begin_layout Itemize
edge recombination crossover
\end_layout

\begin_layout Itemize
edge assembly crossover
\end_layout

\begin_layout Standard
The PMX is similar to the two-point crossover.
 A crossing region is chosen by selecting two crossing points.
 
\end_layout

\begin_layout LyX-Code
C1 = 012|345|6789
\end_layout

\begin_layout LyX-Code
C2 = 987|654|3210
\end_layout

\begin_layout Standard
After performing the crossover we--normally--got two invalid chromosomes.
\end_layout

\begin_layout LyX-Code
C1 = 012|654|6789
\end_layout

\begin_layout LyX-Code
C2 = 987|345|3210
\end_layout

\begin_layout Standard
Chromosome C1 contains the value 6 twice and misses the value 3.
 On the other side chromosome C2 contains the value 3 twice and misses the
 value 6.
 We can observe that this crossover is equivalent to the exchange of the
 values 3
\begin_inset Formula $\rightarrow$
\end_inset

6, 4
\begin_inset Formula $\rightarrow$
\end_inset

5 and 5
\begin_inset Formula $\rightarrow$
\end_inset

4.
 To repair the two chromosomes we have to apply this exchange outside the
 crossing region.
 
\end_layout

\begin_layout LyX-Code
C1 = 012|654|3789
\end_layout

\begin_layout LyX-Code
C2 = 987|345|6210
\end_layout

\begin_layout Section
Concurrency
\end_layout

\begin_layout Standard
The Jenetics library tries to parallelize independent task whenever possible.
 It uses the 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
name "ConcurrentContext"
target "http://javolution.org/target/site/apidocs/javolution/context/ConcurrentContext.html"

\end_inset

 
\family default
from the 
\begin_inset CommandInset href
LatexCommand href
name "Javolution"
target "http://javolution.org/"

\end_inset

 library for concurrent task execution.
 In the default configuration the 
\family typewriter
ConcurrentContext
\family default
 utilizes all available
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This is defined by 
\family typewriter
Runtime.getRuntime().availableProcessors()
\family default
.
\end_layout

\end_inset

 cores of the target machine.
 If you want to change the number of used cores you must do this before
 the GA initialization.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

    final int parallelism = 10;
\end_layout

\begin_layout Plain Layout

    Concurrency.setConcurrency(parallelism);
\end_layout

\begin_layout Plain Layout

    // ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
ConcurrentContext
\family default
 uses it's own--optimized--thread-pool implementation, but you have the
 possibility to replace this with the JDKs 
\family typewriter
ForkJoinPool
\family default
.
 This allows you to use the same thread-pool for the GA and 
\shape italic
other
\shape default
 concurrent task.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

    final int parallelism = 10;
\end_layout

\begin_layout Plain Layout

    final ForkJoinPool pool = new ForkJoinPool(parallelism);
\end_layout

\begin_layout Plain Layout

    Concurrency.setForkJoinPool(pool)
\end_layout

\begin_layout Plain Layout

    // ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
aslfk as√∂ldfka √∂lsdkf a√§√∂lsdkf √∂alsdkf 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ConcurrentContext.enter();
\end_layout

\begin_layout Plain Layout

try {
\end_layout

\begin_layout Plain Layout

    ConcurrentContext.execute(new Runnable() { public void run() {
\end_layout

\begin_layout Plain Layout

        // Do some work
\end_layout

\begin_layout Plain Layout

    }});
\end_layout

\begin_layout Plain Layout

} finally {
\end_layout

\begin_layout Plain Layout

    ConcurrentContext.exit();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The fitness calculation is performed concurrently.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try (Concurrency c = Concurrency.start()) {
\end_layout

\begin_layout Plain Layout

    c.execute(task1);
\end_layout

\begin_layout Plain Layout

    c.execute(taks2);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Statistics
\end_layout

\begin_layout Standard
Statistics helper classes.
\end_layout

\begin_layout Section
Examples
\end_layout

\begin_layout Subsection
Ones counting
\end_layout

\begin_layout Standard
Ones counting is one of the simplest model-problem and consists of a binary
 chromosome.
 The fitness of a Genotype is proportional to the number of ones.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class OneCounter implements Function<Genotype<BitGene>, Integer> {
\end_layout

\begin_layout Plain Layout

    @Override 		
\end_layout

\begin_layout Plain Layout

    public Integer apply(Genotype<BitGene> genotype) {
\end_layout

\begin_layout Plain Layout

        int count = 0;
\end_layout

\begin_layout Plain Layout

        for (BitGene gene : genotype.getChromosome()) {
\end_layout

\begin_layout Plain Layout

            if (gene.getBit()) {
\end_layout

\begin_layout Plain Layout

                ++count;
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        return count;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class OnesCounting {
\end_layout

\begin_layout Plain Layout

    public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

        final Factory<Genotype<BitGene>> gtf = Genotype.valueOf(
\end_layout

\begin_layout Plain Layout

            new BitChromosome(20, 0.3333)
\end_layout

\begin_layout Plain Layout

        );
\end_layout

\begin_layout Plain Layout

        final OneCounter ff = new OneCounter();
\end_layout

\begin_layout Plain Layout

        final GeneticAlgorithm<BitGene, Integer> ga = 
\end_layout

\begin_layout Plain Layout

            new GeneticAlgorithm<>(gtf, ff);
\end_layout

\begin_layout Plain Layout

        ga.setAlterer(new CompositeAlterer<>(
\end_layout

\begin_layout Plain Layout

            new Mutator<BitGene>(0.55),
\end_layout

\begin_layout Plain Layout

            new SinglePointChrosover<BitGene>(0.06)
\end_layout

\begin_layout Plain Layout

        ));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        ga.setup();
\end_layout

\begin_layout Plain Layout

        ga.evolve(100);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Real function
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class RealFunction 
\end_layout

\begin_layout Plain Layout

    implements Function<Genotype<Float64Gene>, Double> 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public Double apply(final Genotype<Float64> genotype) {
\end_layout

\begin_layout Plain Layout

        final double angle = genotype.getGene().doubleValue();
\end_layout

\begin_layout Plain Layout

        return cos(sin(angle)*cos(angle));
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Real {
\end_layout

\begin_layout Plain Layout

    public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

        final Factory<Genotype<Float64Gene>> gtf = Genotype.valueOf(
\end_layout

\begin_layout Plain Layout

            new Float64Chromosome(0.0, 2.0*PI)
\end_layout

\begin_layout Plain Layout

        );
\end_layout

\begin_layout Plain Layout

        final RealFunction ff = new RealFunction();
\end_layout

\begin_layout Plain Layout

        final GeneticAlgorithm<Float64Gene, Double> ga =
\end_layout

\begin_layout Plain Layout

            new GeneticAlgorithm<>(gtf, ff);
\end_layout

\begin_layout Plain Layout

        ga.setStatisticsCalculator(
\end_layout

\begin_layout Plain Layout

            new NumberStatistics.Calculator<Float64Gene, Double>()
\end_layout

\begin_layout Plain Layout

        );
\end_layout

\begin_layout Plain Layout

        ga.setFitnessScaler(SQR_SCALER);
\end_layout

\begin_layout Plain Layout

        ga.setPopulationSize(20);
\end_layout

\begin_layout Plain Layout

        ga.setAlterer(new Mutator<Float64Gene>(0.03));
\end_layout

\begin_layout Plain Layout

        ga.addAlterer(new MeanAlterer<Float64Gene>(0.6));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        ga.setup();
\end_layout

\begin_layout Plain Layout

        ga.evolve(100);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Knapsack
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{caption={Knapsack}}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{code/Knapsack.java}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "references"
options "bibtotoc,plain"

\end_inset


\end_layout

\end_body
\end_document
