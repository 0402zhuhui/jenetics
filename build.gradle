/*
 * Java Genetic Algorithm Library (@__identifier__@).
 * Copyright (c) @__year__@ Franz Wilhelmstötter
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * Author:
 *   Franz Wilhelmstötter (franz.wilhelmstoetter@gmx.at)
 *
 */

import java.text.SimpleDateFormat
import java.util.Date
import org.apache.tools.ant.filters.ReplaceTokens

/**
 * @author <a href="mailto:franz.wilhelmstoetter@gmx.at">Franz Wilhelmstötter</a>
 * @since 1.2
 * @version 1.4 &mdash; <em>$Date$</em>
 */

apply plugin: 'signing'

apply from: "${rootDir}/commons.gradle"

ext {
	 jeneticsVersion = '1.4.0'
	 jeneticsAuthor = 'Franz Wilhelsmtötter'
	 jeneticsName = 'Jenetics'
	 jeneticsURL = 'http://jenetics.sourceforge.net'
 
	 now = new Date()
	 year = now.year + 1900
	 copyrightYear = "2007-${year}".toString()
	 identifier = "${rootProject.name}-${jeneticsVersion}".toString()
	 manualDate = (new SimpleDateFormat("yyyy/MM/dd")).format(now)
	 manualIdentifier = "${jeneticsVersion}---${manualDate}".toString()
	 dateformat = new SimpleDateFormat("yyyy-MM-dd HH:mm")
	 
	 includes = new Includes()
	 
	 // Define some 'global' path variables.
	 exportDir = file("${buildDir}/package/${identifier}")
	 exportProjectDir = file("${exportDir}/project")
	 exportProjectLibDir = file("${exportProjectDir}/buildSrc/lib")
	 exportLibDir = file("${exportDir}/lib")
	 exportJavadocDir = file("${exportDir}/javadoc")
	 exportReportDir = file("${exportDir}/report")
	 exportScriptDir = file("${exportDir}/script")
}

subprojects { subproj ->
	version = jeneticsVersion
	if (plugins.hasPlugin('java')) {
		sourceCompatibility = 1.7
		targetCompatibility = 1.7
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.7'
}

task export(overwrite: true) {
	inputs.dir file('.')
	outputs.dir exportDir

	// Create the directory structure.
	doFirst {
		exportDir.mkdirs()
		exportProjectDir.mkdirs()
		exportProjectLibDir.mkdirs()
		exportLibDir.mkdirs()
		exportReportDir.mkdirs()
		exportJavadocDir.mkdirs()
		exportScriptDir.mkdirs()
	}

	doLast  {
		// Copy the files in the base directory.
		copy {
			from('.') {
				include '*'
				exclude 'org.*'
				exclude '.gradle'
				exclude '.hgignore'
				exclude '.hgtags'
				exclude '*.iml'
				exclude '*.ipr'
				exclude '*.iws'
				exclude '.project'
				exclude '.classpath'
				exclude 'build'
			}
			into exportProjectDir
			filter(ReplaceTokens, tokens: [
				__identifier__: identifier,
				__year__: copyrightYear
			])
		}
		copy {
			from('.') {
				include 'gradle/**/*'
			}
			into exportProjectDir
		}
		
		// Copy 'buildSrc' files.
		copy {
			from(project('buildSrc').projectDir) {
				include '*.gradle'
				include 'src/**/*.java'
				include 'src/**/*.gradle'
				include 'src/**/*.xml'
				include 'src/**/*.c'
				include 'src/**/*.cpp'
				include 'src/**/*.h'
				include 'src/**/*.hpp'
			}
			into file("${exportProjectDir}/buildSrc")
			filter(ReplaceTokens, tokens: [
				__identifier__: identifier,
				__year__: copyrightYear
			])
		}
		copy {
			from(project('buildSrc').projectDir) {
				include 'src/**/*.*'
				include 'lib/**/*'
				include 'tool/**/*'
				include 'resources/**/*'
				exclude 'src/**/*.java'
				exclude 'src/**/*.gradle'
				exclude 'src/**/*.xml'
				exclude 'src/**/*.c'
				exclude 'src/**/*.cpp'
				exclude 'src/**/*.h'
				exclude 'src/**/*.hpp'
			}
			into file("${exportProjectDir}/buildSrc")
		}
	}
}

// Create a zip file from the export directory.
task zip(type: Zip) {
	from("build/package/${identifier}") {
		into identifier
	}

	baseName = rootProject.name
	version = jeneticsVersion

	doLast {
		def zip = new File("${identifier}.zip")
		zip.renameTo(new File('build/package', zip.getName()))
	}
}

signing {
	// gpg --armor --detach-sign jenetics-1.4.0.zip
	// gpg --verify jenetics-1.4.0.zip.asc jenetics-1.4.0.zip
	sign zip
}

repositories {
	flatDir(dir: "${rootDir}/buildSrc/lib")
	mavenCentral()
}


/**
 * Class which defines the external dependencies.
 *
 * @author <a href="mailto:franz.wilhelmstoetter@gmx.at">Franz Wilhelmstötter</a>
 * @since 1.4
 * @version 1.4 &mdash; <em>$Date$</em>
 */
class Includes {
	final Javolution = 'org.javolution:javolution-core-java:6.0.0'
	final JScience = 'jscience:jscience:4.3.1'
	final TestNG = 'org.testng:testng:6.8.5'
}




