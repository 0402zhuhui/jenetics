/*
 * Java Genetic Algorithm Library (@__identifier__@).
 * Copyright (c) @__year__@ Franz Wilhelmstötter
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * Author:
 *   Franz Wilhelmstötter (franz.wilhelmstoetter@gmx.at)
 *
 */

import java.text.SimpleDateFormat
import java.util.Date
import org.apache.tools.ant.filters.ReplaceTokens

/**
 * @author <a href="mailto:franz.wilhelmstoetter@gmx.at">Franz Wilhelmstötter</a>
 * @since 1.2
 * @version 1.4 &mdash; <em>$Date$</em>
 */

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "signing"

/**
 * Class which defines the external dependencies.
 */
class Includes {
	final JScience = 'jscience:jscience:4.3.1'
	final TestNG = 'testng:testng:6.8.1'
}


/**
 * Definition of additional variables.
 */
ext {
	jeneticsVersion = '1.4.0'
	jeneticsAuthor = 'Franz Wilhelsmtötter'
	jeneticsName = 'Jenetics'
	jeneticsURL = 'http://jenetics.sourceforge.net'

	now = new Date()
	year = now.year + 1900
	copyrightYear = "2007-${year}".toString()
	identifier = "${rootProject.name}-${jeneticsVersion}".toString()
	manualDate = (new SimpleDateFormat("yyyy/MM/dd")).format(now)
	manualIdentifier = "${jeneticsVersion}---${manualDate}".toString()
	dateformat = new SimpleDateFormat("yyyy-MM-dd HH:mm")
	
	includes = new Includes()
}

allprojects {
	//group = "org.gradle"
}

subprojects { subproj ->
	version = jeneticsVersion
	if (plugins.hasPlugin('java')) {
		sourceCompatibility = 1.7
		targetCompatibility = 1.7
	}
}



 task pack << {
	def exportBaseDir = new File(buildDir, "package/${identifier}/source")
	def exportProjectDir = new File(exportBaseDir, 'project')

	exportBaseDir.mkdirs()
	exportProjectDir.mkdirs()

	// Copy the project directory.
	copy {
		from('project') {
			include '**/*.java'
			include '**/*.xml'
			include '**/*.gradle'
		}
		into "${exportProjectDir}"
		filter(ReplaceTokens, tokens: [
			__identifier__: identifier,
			__year__: copyrightYear
		])
	}
	copy {
		from("project") {
			exclude '**/*.java'
			exclude '**/*.java'
			exclude '**/*.xml'
			exclude '**/*.gradle'
		}
		into "${exportProjectDir}"
	}

	// Copy the files in the base directory.
	copy {
		from(".") {
			include '*.*'
			exclude 'org.*'
			exclude '.gradle'
			exclude '.hgignore'
			exclude '.hgtags'
			exclude '*.iml'
			exclude '*.ipr'
			exclude '*.iws'
			exclude '.project'
			exclude '.classpath'
		}
		into "${exportBaseDir}"
		filter(ReplaceTokens, tokens: [
			__identifier__: identifier,
			__year__: copyrightYear
		])
	}
}

task export(dependsOn: pack) << {
}

// Create a zip file from the export directory.
task zip(type: Zip) {
	from("build/package/${identifier}") {
		into identifier
	}

	baseName = rootProject.name
	version = jeneticsVersion

	doLast {
		def zip = new File("${identifier}.zip")
		zip.renameTo(new File('build/package', zip.getName()))
	}
}

signing {
	// gpg --armor --detach-sign jenetics-1.4.0.zip
	// gpg --verify jenetics-1.4.0.zip.asc jenetics-1.4.0.zip
	sign zip
}




