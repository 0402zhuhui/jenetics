/*
 * Java Genetic Algorithm Library (@__identifier__@).
 * Copyright (c) @__year__@ Franz Wilhelmstötter
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:
 *    Franz Wilhelmstötter (franz.wilhelmstoetter@gmx.at)
 */

import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: "eclipse"
apply plugin: "idea"

apply from: "./build-util.gradle"

allprojects {
	//group = "org.gradle"
}

subprojects { subproj ->
	version = jeneticsVersion
	if (plugins.hasPlugin("java")) {
		sourceCompatibility = 1.7
		targetCompatibility = 1.7

	}
}


task clean << {
	buildDir.deleteDir()
}

 task pack << {
	def exportBaseDir = new File(buildDir, "package/${identifier}/source")
	def exportProjectDir = new File(exportBaseDir, 'project')

	exportBaseDir.mkdirs()
	exportProjectDir.mkdirs()

	// Copy the project directory.
	copy {
		from('project') {
			include '**/*.java'
			include '**/*.xml'
			include '**/*.gradle'
		}
		into "${exportProjectDir}"
		filter(ReplaceTokens, tokens: [
			__identifier__: identifier,
			__year__: copyrightYear
		])
	}
	copy {
		from("project") {
			exclude "**/*.java"
			exclude "**/*.java"
			exclude "**/*.xml"
			exclude "**/*.gradle"
		}
		into "${exportProjectDir}"
	}

	// Copy the files in the base directory.
	copy {
		from(".") {
			include "*.*"
			exclude "org.*"
			exclude ".gradle"
			exclude ".hgignore"
			exclude ".hgtags"
		}
		into "${exportBaseDir}"
		filter(ReplaceTokens, tokens: [
			__identifier__: identifier,
			__year__: copyrightYear
		])
	}
}

task export(dependsOn: pack) << {
}

// Create a zip file from the export directory.
task zip(type: Zip) {
	from("build/package/${identifier}") {
		into identifier
	}

	baseName = rootProject.name
	version = jeneticsVersion

	doLast {
		def zip = new File("${identifier}.zip")
		zip.renameTo(new File("build/package", zip.getName()))
	}
}




