/*
 * Java Genetic Algorithm Library (@__identifier__@).
 * Copyright (c) @__year__@ Franz Wilhelmstötter
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * Author:
 *   Franz Wilhelmstötter (franz.wilhelmstoetter@gmx.at)
 *
 */

import org.apache.tools.ant.filters.ReplaceTokens

import org.jenetics.gradle.Include
import org.jenetics.gradle.task.ColorizerTask

/**
 * @author <a href="mailto:franz.wilhelmstoetter@gmx.at">Franz Wilhelmstötter</a>
 * @since 1.2
 * @version 1.4 &mdash; <em>$Date: 2013-08-26 $</em>
 */

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'osgi'
apply plugin: 'eclipse'
apply plugin: 'idea'

apply from: "${rootDir}/gradle/commons.gradle"

tasks.withType(AbstractCompile).all { AbstractCompile compile ->
	//compile.options.debug = true
	//compile.options.compilerArgs = ['-Xlint:all']
}

jar {
	manifest {
		version = version
		symbolicName = name
		name = 'org.jenetics'
		instruction 'Export-Package',
				'org.jenetics',
				'org.jenetics.util',
				'org.jenetics.stat'
		instruction 'Bundle-Vendor', jenetics.author
		instruction 'Bundle-Description', 'Jenetics - Java Genetic Algorithm Library'
		instruction 'Bundle-DocUR', jenetics.url

		attributes 'Implementation-Title': 'org.jenetics',
					'Implementation-Version': version,
					'Implementation-URL': jenetics.url,
					'Implementation-Vendor': jenetics.name,
					'ProjectName': jenetics.name,
					'Version': version,
					'Maintainer': jenetics.author
	}
}

task jarjar(type: Jar, dependsOn: build) {
	baseName = project.name + '-all'
	from files(sourceSets.main.output.classesDir)
	from {
		configurations.compile.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
	manifest {
		attributes 'Implementation-Title': 'org.jenetics-all',
				'Implementation-Versionv': version,
				'Implementation-URL': jenetics.url,
				'Implementation-Vendor': jenetics.name,
				'ProjectName': jenetics.name,
				'Version': version,
				'Maintainer': jenetics.author
	}
}

task pack(dependsOn: [jarjar, javadoc, jacocoTestReport]){}

export.dependsOn(pack)
export.doLast {
	// Copy the javadoc
	copy {
		from("${buildDir}/docs/javadoc") {
			include '**/*.html'
		}
		into exportJavadocDir
		filter(ReplaceTokens, tokens: [
			__identifier__: identifier,
			__year__: copyrightYear
		])
	}
	copy {
		from("${buildDir}/docs/javadoc") {
			exclude '**/*.html'
		}
		into exportJavadocDir
	}

	// Copy the test-report.
	copy {
		from("${buildDir}/reports") {
			include 'tests/**'
			include 'jacoco/**'
			include '*.gradle'
			exclude '.gradle'
		}
		into exportReportDir
	}
}

javadoc {
	configure(options) {
		memberLevel = 'PROTECTED'
		version = true
		author = true
		docEncoding = 'UTF-8'
		charSet = 'UTF-8'
		linkSource = true
		links = [
			'http://download.oracle.com/javase/7/docs/api/',
			'http://jscience.org/api/',
			'http://javolution.org/target/site/apidocs/'
		]
		windowTitle = "Jenetics API ${project.version}"
		docTitle = "<h1>Jenetics API (Version $project.version)</h1>"
		bottom = "&copy; ${copyrightYear} Franz Wilhelmst&ouml;tter  &nbsp;<i>(${dateformat.format(now)})</i>"
		stylesheetFile = file("${rootDir}/buildSrc/resources/javadoc/stylesheet.css")
		
		exclude 'org/jenetics/internal/**'
		
		//options.addStringOption('-subpackages', 'org.jenetics')
		//options.addStringOption('-exclude', 'org.jenetics.internal.util')
		
		//group('Core API', ['org.jenetics']).
		//group('Utilities', ['org.jenetics.util', 'org.jenetics.stat'])
	}
}

task colorize(type: ColorizerTask) {
	directory = file(javadoc.destinationDir.path)
}

task java2html {
	def destination = javadoc.destinationDir.path
	doLast {
		javaexec {
			main = 'de.java2html.Java2Html'
			args = [
				'-srcdir', 'src/main/java',
				'-targetdir', "${destination}/src-html"
			]
			classpath = files("${rootDir}/buildSrc/lib/java2html.jar")
		}
		copy {
			from 'src/main/java/org/jenetics/doc-files'
			into "${destination}/org/jenetics/doc-files"
		}
		copy {
			from 'src/main/java/org/jenetics/stat/doc-files'
			into "${destination}/org/jenetics/stat/doc-files"
		}
		copy {
			from 'src/main/java/org/jenetics/util/doc-files'
			into "${destination}/org/jenetics/util/doc-files"
		}
	}
}

javadoc.finalizedBy([colorize, java2html])

test {
	useTestNG()
	options {
		suites 'src/test/resources/testng.xml'
	}
}

jacocoTestReport{
	reports {
		xml.enabled true
		csv.enabled true
	}
}

clean.doLast {
	file("${projectDir}/bin").deleteDir()
	file("${projectDir}/test-output").deleteDir()
}

dependencies {
	//testCompile(Include.Javolution) { transitive = false }
	compile Include.JScience
	testCompile Include.TestNG
}









