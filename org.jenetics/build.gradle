/*
 * Java Genetic Algorithm Library (@__identifier__@).
 * Copyright (c) @__year__@ Franz Wilhelmstötter
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:
 *    Franz Wilhelmstötter (franz.wilhelmstoetter@gmx.at)
 */

import org.apache.tools.ant.filters.ReplaceTokens

import org.jenetics.gradle.Include
import org.jenetics.gradle.task.ColorizerTask

/**
 * @author <a href="mailto:franz.wilhelmstoetter@gmx.at">Franz Wilhelmstötter</a>
 * @since 1.2
 * @version 1.4 &mdash; <em>$Date: 2013-09-02 $</em>
 */

apply plugin: 'jacoco'
apply plugin: 'osgi'
apply plugin: 'eclipse'
apply plugin: 'idea'

apply from: "${rootDir}/gradle/commons.gradle"
apply from: "${rootDir}/gradle/javadoc.gradle"

tasks.withType(AbstractCompile).all { AbstractCompile compile ->
	//compile.options.debug = true
	//compile.options.compilerArgs = ['-Xlint:all']
}

jar {
	manifest {
		version = version
		symbolicName = project.name
		name = project.name
		instruction 'Export-Package',
					'org.jenetics',
					'org.jenetics.util',
					'org.jenetics.stat'
		instruction 'Bundle-Vendor', jenetics.author
		instruction 'Bundle-Description', jenetics.description
		instruction 'Bundle-DocUR', jenetics.url

		attributes 'Implementation-Title': project.name,
					'Implementation-Version': version,
					'Implementation-URL': jenetics.url,
					'Implementation-Vendor': jenetics.name,
					'ProjectName': jenetics.name,
					'Version': version,
					'Maintainer': jenetics.author
	}
}

task jarjar(type: Jar, dependsOn: build) {
	baseName = "${project.name}-all"
	from files(sourceSets.main.output.classesDir)
	from {
		configurations.compile.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}

	manifest {
		attributes 'Implementation-Title': "${project.name}-all",
					'Implementation-Versionv': version,
					'Implementation-URL': jenetics.url,
					'Implementation-Vendor': jenetics.name,
					'ProjectName': jenetics.name,
					'Version': version,
					'Maintainer': jenetics.author
	}
}

task pack(dependsOn: [jarjar, javadoc, jacocoTestReport]){}

export.dependsOn(pack)

test {
	useTestNG()
	options {
		suites 'src/test/resources/testng.xml'
	}
}

export.doLast {
	copy {
		from("${buildDir}/reports") {
			include 'tests/**'
			include 'jacoco/**'
			include '*.gradle'
			exclude '.gradle'
		}
		into "${exportReportDir}/${project.name}"
	}
}

jacocoTestReport{
	reports {
		xml.enabled true
		csv.enabled true
	}
}

dependencies {
	//testCompile(Include.Javolution) { transitive = false }
	compile Include.JScience
	testCompile Include.TestNG
}


